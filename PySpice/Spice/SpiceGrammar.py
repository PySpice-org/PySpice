#!/usr/bin/env python

# CAVEAT UTILITOR
#
# This file was automatically generated by TatSu.
#
#    https://pypi.python.org/pypi/tatsu/
#
# Any changes you make to it will be overwritten the next time
# the file is generated.

from __future__ import annotations

import sys

from tatsu.buffering import Buffer
from tatsu.parsing import Parser
from tatsu.parsing import tatsumasu
from tatsu.parsing import leftrec, nomemo, isname # noqa
from tatsu.infos import ParserConfig
from tatsu.util import re, generic_main  # noqa


KEYWORDS = {}  # type: ignore


class SpiceBuffer(Buffer):
    def __init__(self, text, /, config: ParserConfig = None, **settings):
        config = ParserConfig.new(
            config,
            owner=self,
            whitespace=None,
            nameguard=None,
            comments_re=None,
            eol_comments_re=None,
            ignorecase=True,
            namechars='',
            parseinfo=True,
        )
        config = config.replace(**settings)
        super().__init__(text, config=config)


class SpiceParser(Parser):
    def __init__(self, /, config: ParserConfig = None, **settings):
        config = ParserConfig.new(
            config,
            owner=self,
            whitespace=None,
            nameguard=None,
            comments_re=None,
            eol_comments_re=None,
            ignorecase=True,
            namechars='',
            parseinfo=True,
            keywords=KEYWORDS,
            start='start',
        )
        config = config.replace(**settings)
        super().__init__(config=config)

    @tatsumasu('Circuit')
    def _start_(self):  # noqa
        with self._optional():
            self._token('.TITLE')

        def block0():
            self._st_()
        self._closure(block0)
        with self._optional():
            self._asterisk_()

        def block1():
            self._st_()
        self._closure(block1)
        self._text_()
        self.add_last_node_to_name('title')

        def block3():
            self._newline_()
            self._asterisk_()

            def block4():
                self._st_()
            self._closure(block4)
            self._text_()
            self.add_last_node_to_name('title')

            self._define(
                [],
                ['title']
            )
        self._closure(block3)

        def block6():

            def block7():
                self._st_()
            self._closure(block7)
            with self._optional():
                with self._choice():
                    with self._option():
                        self._line_comment_()
                    with self._option():
                        self._inline_comment_()
                    self._error(
                        'expecting one of: '
                        '<inline_comment> <line_comment>'
                    )
            self._newline_()
        self._closure(block6)

        def block9():
            self._st_()
        self._closure(block9)
        with self._optional():
            self._lines_()
            self.name_last_node('lines')
        with self._optional():
            self._token('.END')
            self._end_sep_()
        self._check_eof()

        self._define(
            ['lines'],
            ['title']
        )

    @tatsumasu('Lines')
    def _lines_(self):  # noqa

        def block0():
            self._circuit_line_()
            self.name_last_node('@')
        self._closure(block0)

    @tatsumasu('CircuitLine')
    def _circuit_line_(self):  # noqa
        with self._group():
            with self._choice():
                with self._option():
                    self._device_()
                    self.name_last_node('@')
                with self._option():
                    self._command_()
                    self.name_last_node('@')
                with self._option():
                    self._encrypted_()
                self._error(
                    'expecting one of: '
                    '<command> <device> <encrypted>'
                )
        self._end_sep_()
        self.name_last_node('@')

    @tatsumasu('NetlistLines')
    def _netlist_lines_(self):  # noqa

        def block0():
            self._netlist_line_()
            self.name_last_node('@')
        self._closure(block0)

    @tatsumasu('NetlistLine')
    def _netlist_line_(self):  # noqa
        with self._group():
            with self._choice():
                with self._option():
                    self._device_()
                    self.name_last_node('@')
                with self._option():
                    self._netlist_cmds_()
                    self.name_last_node('@')
                with self._option():
                    self._encrypted_()
                self._error(
                    'expecting one of: '
                    '<device> <encrypted> <netlist_cmds>'
                )
        self._end_sep_()
        self.name_last_node('@')

    @tatsumasu()
    def _encrypted_(self):  # noqa
        self._token('$CDNENCSTART')
        self._cut()
        with self._optional():
            self._id_()

        def block0():
            self._newline_()
        self._positive_closure(block0)

        def block1():

            def block2():
                self._pattern('[0-9a-f]')
            self._closure(block2)

            def block3():
                self._newline_()
            self._positive_closure(block3)
        self._closure(block1)
        self._token('$CDNENCFINISH')
        self._cut()
        with self._optional():
            self._id_()

    @tatsumasu()
    def _device_(self):  # noqa
        with self._choice():
            with self._option():
                self._nonlinear_dependent_source_()
                self.name_last_node('@')
            with self._option():
                self._capacitor_()
                self.name_last_node('@')
            with self._option():
                self._diode_()
                self.name_last_node('@')
            with self._option():
                self._voltage_controlled_voltage_source_()
                self.name_last_node('@')
            with self._option():
                self._current_controlled_current_source_()
                self.name_last_node('@')
            with self._option():
                self._voltage_controlled_current_source_()
                self.name_last_node('@')
            with self._option():
                self._current_controlled_voltage_source_()
                self.name_last_node('@')
            with self._option():
                self._current_source_()
                self.name_last_node('@')
            with self._option():
                self._jfet_()
                self.name_last_node('@')
            with self._option():
                self._mutual_inductor_()
                self.name_last_node('@')
            with self._option():
                self._inductor_()
                self.name_last_node('@')
            with self._option():
                self._mosfet_()
                self.name_last_node('@')
            with self._option():
                self._bjt_()
                self.name_last_node('@')
            with self._option():
                self._resistor_()
                self.name_last_node('@')
            with self._option():
                self._subcircuit_()
                self.name_last_node('@')
            with self._option():
                self._switch_()
                self.name_last_node('@')
            with self._option():
                self._voltage_source_()
                self.name_last_node('@')
            self._error(
                'expecting one of: '
                "'B' 'C' 'D' 'E' 'F' 'G' 'H' 'I' 'J' 'K'"
                "'L' 'M' 'Q' 'R' 'S' 'V' 'X' <bjt>"
                '<capacitor>'
                '<current_controlled_current_source>'
                '<current_controlled_voltage_source>'
                '<current_source> <diode> <inductor>'
                '<jfet> <mosfet> <mutual_inductor>'
                '<nonlinear_dependent_source> <resistor>'
                '<subcircuit> <switch>'
                '<voltage_controlled_current_source>'
                '<voltage_controlled_voltage_source>'
                '<voltage_source>'
            )

    @tatsumasu('NonLinearDependentSource')
    def _nonlinear_dependent_source_(self):  # noqa
        with self._if():
            self._token('B')
        self._cut()
        self._dev_()
        self.name_last_node('dev')
        self._sep_()
        self.name_last_node('sep')
        self._node_()
        self.name_last_node('positive')
        self._sep_()
        self.name_last_node('sep')
        self._node_()
        self.name_last_node('negative')
        self._cut()
        self._sep_()
        self.name_last_node('sep')
        with self._group():
            with self._choice():
                with self._option():
                    self._token('V')
                with self._option():
                    self._token('I')
                self._error(
                    'expecting one of: '
                    "'I' 'V'"
                )
        self.name_last_node('magnitude')
        with self._optional():
            self._sep_()
            self.name_last_node('sep')
        self._token('=')
        with self._optional():
            self._sep_()
            self.name_last_node('sep')
        self._abm_expression_()
        self.name_last_node('expr')
        with self._optional():
            self._sep_()
            self.name_last_node('sep')
            self._parameters_()
            self.name_last_node('parameters')

            self._define(
                ['parameters', 'sep'],
                []
            )

        self._define(
            ['dev', 'expr', 'magnitude', 'negative', 'parameters', 'positive', 'sep'],
            []
        )

    @tatsumasu()
    def _abm_expression_(self):  # noqa
        with self._choice():
            with self._option():
                self._lc_()
                with self._optional():
                    self._sep_()
                    self.name_last_node('sep')
                self._control_table_()
                self.name_last_node('@')
                with self._optional():
                    self._sep_()
                    self.name_last_node('sep')
                self._rc_()

                self._define(
                    ['sep'],
                    []
                )
            with self._option():
                self._braced_expression_()
                self.name_last_node('@')
            with self._option():
                self._tablefile_()
                self.name_last_node('@')
            self._error(
                'expecting one of: '
                "'tablefile' '{' <braced_expression> <lc>"
            )

    @tatsumasu('Capacitor')
    def _capacitor_(self):  # noqa
        with self._if():
            self._token('C')
        self._cut()
        self._dev_()
        self.name_last_node('dev')
        self._sep_()
        self.name_last_node('sep')
        self._node_()
        self.name_last_node('positive')
        self._sep_()
        self.name_last_node('sep')
        self._node_()
        self.name_last_node('negative')
        self._cut()
        with self._optional():
            with self._choice():
                with self._option():
                    self._sep_()
                    self.name_last_node('sep')
                    self._gen_expr_()
                    self.name_last_node('value')
                    with self._optional():
                        self._sep_()
                        self.name_last_node('sep')
                        self._model_name_()
                        self.name_last_node('model')

                        self._define(
                            ['model', 'sep'],
                            []
                        )

                    self._define(
                        ['model', 'sep', 'value'],
                        []
                    )
                with self._option():
                    self._sep_()
                    self.name_last_node('sep')
                    self._model_name_()
                    self.name_last_node('model')
                    with self._optional():
                        self._sep_()
                        self.name_last_node('sep')
                        self._gen_expr_()
                        self.name_last_node('value')

                        self._define(
                            ['sep', 'value'],
                            []
                        )

                    self._define(
                        ['model', 'sep', 'value'],
                        []
                    )
                self._error(
                    'expecting one of: '
                    '<sep>'
                )
        with self._optional():
            self._sep_()
            self.name_last_node('sep')
            self._parameters_()
            self.name_last_node('parameters')

            self._define(
                ['parameters', 'sep'],
                []
            )

        self._define(
            ['dev', 'model', 'negative', 'parameters', 'positive', 'sep', 'value'],
            []
        )

    @tatsumasu('Diode')
    def _diode_(self):  # noqa
        with self._if():
            self._token('D')
        self._cut()
        self._dev_()
        self.name_last_node('dev')
        self._sep_()
        self.name_last_node('sep')
        self._node_()
        self.name_last_node('positive')
        self._sep_()
        self.name_last_node('sep')
        self._node_()
        self.name_last_node('negative')
        self._cut()
        self._sep_()
        self.name_last_node('sep')
        self._model_name_()
        self.name_last_node('model')
        with self._optional():
            self._sep_()
            self.name_last_node('sep')
            self._gen_expr_()
            self.name_last_node('area')

            self._define(
                ['area', 'sep'],
                []
            )
        with self._optional():
            self._sep_()
            self.name_last_node('sep')
            self._parameters_()
            self.name_last_node('parameters')

            self._define(
                ['parameters', 'sep'],
                []
            )

        self._define(
            ['area', 'dev', 'model', 'negative', 'parameters', 'positive', 'sep'],
            []
        )

    @tatsumasu('VoltageControlledVoltageSource')
    def _voltage_controlled_voltage_source_(self):  # noqa
        with self._if():
            self._token('E')
        self._cut()
        self._dev_()
        self.name_last_node('dev')
        self._sep_()
        self.name_last_node('sep')
        self._node_()
        self.name_last_node('positive')
        self._sep_()
        self.name_last_node('sep')
        self._node_()
        self.name_last_node('negative')
        self._cut()
        self._sep_()
        self.name_last_node('sep')
        with self._group():
            with self._choice():
                with self._option():
                    with self._group():
                        with self._group():
                            with self._choice():
                                with self._option():
                                    self._parenthesis_nodes_()
                                with self._option():
                                    self._circuit_nodes_()
                                self._error(
                                    'expecting one of: '
                                    '<circuit_nodes> <parenthesis_nodes>'
                                )
                        self.name_last_node('nodes')
                        self._sep_()
                        self.name_last_node('sep')
                        self._gen_expr_()
                        self.name_last_node('transconductance')

                        self._define(
                            ['nodes', 'sep', 'transconductance'],
                            []
                        )
                with self._option():
                    with self._group():
                        with self._group():
                            with self._choice():
                                with self._option():
                                    self._control_value_()
                                with self._option():
                                    self._control_table_()
                                with self._option():
                                    self._control_voltage_poly_()
                                self._error(
                                    'expecting one of: '
                                    '<control_table> <control_value>'
                                    '<control_voltage_poly>'
                                )
                        self.name_last_node('controller')
                self._error(
                    'expecting one of: '
                    '<circuit_nodes> <control_table>'
                    '<control_value> <control_voltage_poly>'
                    '<parenthesis_nodes>'
                )

        self._define(
            ['controller', 'dev', 'negative', 'nodes', 'positive', 'sep', 'transconductance'],
            []
        )

    @tatsumasu('CurrentControlledCurrentSource')
    def _current_controlled_current_source_(self):  # noqa
        with self._if():
            self._token('F')
        self._cut()
        self._dev_()
        self.name_last_node('dev')
        self._sep_()
        self.name_last_node('sep')
        self._node_()
        self.name_last_node('positive')
        self._sep_()
        self.name_last_node('sep')
        self._node_()
        self.name_last_node('negative')
        self._cut()
        self._sep_()
        self.name_last_node('sep')
        with self._group():
            with self._choice():
                with self._option():
                    with self._group():
                        self._control_current_poly_()
                        self.name_last_node('controller')
                with self._option():
                    with self._group():
                        self._dev_()
                        self.name_last_node('device')
                        self._sep_()
                        self.name_last_node('sep')
                        self._gen_expr_()
                        self.name_last_node('gain')

                        self._define(
                            ['device', 'gain', 'sep'],
                            []
                        )
                self._error(
                    'expecting one of: '
                    '<control_current_poly> <dev>'
                )

        self._define(
            ['controller', 'dev', 'device', 'gain', 'negative', 'positive', 'sep'],
            []
        )

    @tatsumasu('VoltageControlledCurrentSource')
    def _voltage_controlled_current_source_(self):  # noqa
        with self._if():
            self._token('G')
        self._cut()
        self._dev_()
        self.name_last_node('dev')
        self._sep_()
        self.name_last_node('sep')
        self._node_()
        self.name_last_node('positive')
        self._sep_()
        self.name_last_node('sep')
        self._node_()
        self.name_last_node('negative')
        self._cut()
        self._sep_()
        self.name_last_node('sep')
        with self._group():
            with self._choice():
                with self._option():
                    with self._group():
                        with self._group():
                            with self._choice():
                                with self._option():
                                    self._parenthesis_nodes_()
                                with self._option():
                                    self._circuit_nodes_()
                                self._error(
                                    'expecting one of: '
                                    '<circuit_nodes> <parenthesis_nodes>'
                                )
                        self.name_last_node('nodes')
                        self._sep_()
                        self.name_last_node('sep')
                        self._gen_expr_()
                        self.name_last_node('transconductance')

                        self._define(
                            ['nodes', 'sep', 'transconductance'],
                            []
                        )
                with self._option():
                    with self._group():
                        with self._group():
                            with self._choice():
                                with self._option():
                                    self._control_value_()
                                with self._option():
                                    self._control_table_()
                                with self._option():
                                    self._control_voltage_poly_()
                                self._error(
                                    'expecting one of: '
                                    '<control_table> <control_value>'
                                    '<control_voltage_poly>'
                                )
                        self.name_last_node('controller')
                self._error(
                    'expecting one of: '
                    '<circuit_nodes> <control_table>'
                    '<control_value> <control_voltage_poly>'
                    '<parenthesis_nodes>'
                )

        self._define(
            ['controller', 'dev', 'negative', 'nodes', 'positive', 'sep', 'transconductance'],
            []
        )

    @tatsumasu('CurrentControlledVoltageSource')
    def _current_controlled_voltage_source_(self):  # noqa
        with self._if():
            self._token('H')
        self._cut()
        self._dev_()
        self.name_last_node('dev')
        self._sep_()
        self.name_last_node('sep')
        self._node_()
        self.name_last_node('positive')
        self._sep_()
        self.name_last_node('sep')
        self._node_()
        self.name_last_node('negative')
        self._cut()
        self._sep_()
        self.name_last_node('sep')
        with self._group():
            with self._choice():
                with self._option():
                    with self._group():
                        self._control_current_poly_()
                        self.name_last_node('controller')
                with self._option():
                    with self._group():
                        self._dev_()
                        self.name_last_node('device')
                        self._sep_()
                        self.name_last_node('sep')
                        self._gen_expr_()
                        self.name_last_node('transresistance')

                        self._define(
                            ['device', 'sep', 'transresistance'],
                            []
                        )
                self._error(
                    'expecting one of: '
                    '<control_current_poly> <dev>'
                )

        self._define(
            ['controller', 'dev', 'device', 'negative', 'positive', 'sep', 'transresistance'],
            []
        )

    @tatsumasu('ControlValue')
    def _control_value_(self):  # noqa
        self._token('VALUE')
        self.name_last_node('type')
        self._cut()
        with self._optional():
            self._sep_()
            self.name_last_node('sep')
        self._token('=')
        with self._optional():
            self._sep_()
            self.name_last_node('sep')
        self._braced_expression_()
        self.name_last_node('expression')

        self._define(
            ['expression', 'sep', 'type'],
            []
        )

    @tatsumasu('ControlTable')
    def _control_table_(self):  # noqa
        self._token('TABLE')
        self.name_last_node('type')
        self._cut()
        with self._optional():
            self._sep_()
            self.name_last_node('sep')
        self._braced_expression_()
        self.name_last_node('expr')
        with self._optional():
            self._sep_()
            self.name_last_node('sep')
        self._token('=')
        with self._optional():
            self._sep_()
            self.name_last_node('sep')
        with self._group():
            with self._choice():
                with self._option():
                    with self._group():
                        self._lp_()
                        with self._optional():
                            self._sep_()
                            self.name_last_node('sep')
                        self._value_()
                        self.add_last_node_to_name('input')
                        with self._optional():
                            self._sep_()
                            self.name_last_node('sep')
                        self._comma_()
                        with self._optional():
                            self._sep_()
                            self.name_last_node('sep')
                        self._value_()
                        self.add_last_node_to_name('output')
                        with self._optional():
                            self._sep_()
                            self.name_last_node('sep')
                        self._rp_()

                        def block12():

                            def block13():
                                self._sep_()
                                self.name_last_node('sep')
                            self._positive_closure(block13)
                            self._lp_()
                            with self._optional():
                                self._sep_()
                                self.name_last_node('sep')
                            self._value_()
                            self.add_last_node_to_name('input')
                            with self._optional():
                                self._sep_()
                                self.name_last_node('sep')
                            self._comma_()
                            with self._optional():
                                self._sep_()
                                self.name_last_node('sep')
                            self._value_()
                            self.add_last_node_to_name('output')
                            with self._optional():
                                self._sep_()
                                self.name_last_node('sep')
                            self._rp_()

                            self._define(
                                ['sep'],
                                ['input', 'output']
                            )
                        self._closure(block12)

                        self._define(
                            ['sep'],
                            ['input', 'output']
                        )
                with self._option():
                    with self._group():
                        self._value_()
                        self.add_last_node_to_name('input')
                        with self._optional():
                            self._sep_()
                            self.name_last_node('sep')
                        self._comma_()
                        with self._optional():
                            self._sep_()
                            self.name_last_node('sep')
                        self._value_()
                        self.add_last_node_to_name('output')

                        def block25():

                            def block26():
                                self._sep_()
                                self.name_last_node('sep')
                            self._positive_closure(block26)
                            self._value_()
                            self.add_last_node_to_name('input')
                            with self._optional():
                                self._sep_()
                                self.name_last_node('sep')
                            self._comma_()
                            with self._optional():
                                self._sep_()
                                self.name_last_node('sep')
                            self._value_()
                            self.add_last_node_to_name('output')

                            self._define(
                                ['sep'],
                                ['input', 'output']
                            )
                        self._closure(block25)

                        self._define(
                            ['sep'],
                            ['input', 'output']
                        )
                self._error(
                    'expecting one of: '
                    '<lp> <value>'
                )

        self._define(
            ['expr', 'sep', 'type'],
            ['input', 'output']
        )

    @tatsumasu('ControlVoltagePoly')
    def _control_voltage_poly_(self):  # noqa
        self._token('POLY')
        self._cut()
        with self._optional():
            self._sep_()
            self.name_last_node('sep')
        self._lp_()
        with self._optional():
            self._sep_()
            self.name_last_node('sep')
        self._integer_()
        self.name_last_node('value')
        with self._optional():
            self._sep_()
            self.name_last_node('sep')
        self._rp_()
        with self._optional():
            self._sep_()
            self.name_last_node('sep')

        def sep5():
            with self._group():
                self._sep_()
                self.name_last_node('sep')

        def block5():
            with self._choice():
                with self._option():
                    self._lp_()
                    with self._optional():
                        self._sep_()
                        self.name_last_node('sep')
                    self._node_()
                    self.add_last_node_to_name('positive')
                    with self._optional():
                        self._sep_()
                        self.name_last_node('sep')
                    self._comma_()
                    with self._optional():
                        self._sep_()
                        self.name_last_node('sep')
                    self._node_()
                    self.add_last_node_to_name('negative')
                    with self._optional():
                        self._sep_()
                        self.name_last_node('sep')
                    self._rp_()

                    self._define(
                        ['sep'],
                        ['negative', 'positive']
                    )
                with self._option():
                    self._node_()
                    self.add_last_node_to_name('positive')
                    self._sep_()
                    self.name_last_node('sep')
                    self._node_()
                    self.add_last_node_to_name('negative')

                    self._define(
                        ['sep'],
                        ['negative', 'positive']
                    )
                with self._option():
                    self._value_()
                    self.name_last_node('coefficient')
                self._error(
                    'expecting one of: '
                    '<lp> <node> <value>'
                )
        self._join(block5, sep5)

        self._define(
            ['coefficient', 'sep', 'value'],
            ['negative', 'positive']
        )

    @tatsumasu('ControlCurrentPoly')
    def _control_current_poly_(self):  # noqa
        self._token('POLY')
        self._cut()
        with self._optional():
            self._sep_()
            self.name_last_node('sep')
        self._lp_()
        with self._optional():
            self._sep_()
            self.name_last_node('sep')
        self._integer_()
        self.name_last_node('value')
        with self._optional():
            self._sep_()
            self.name_last_node('sep')
        self._rp_()
        with self._optional():
            self._sep_()
            self.name_last_node('sep')

        def sep5():
            with self._group():
                self._sep_()
                self.name_last_node('sep')

        def block5():
            with self._choice():
                with self._option():
                    self._dev_()
                    self.add_last_node_to_name('device')
                with self._option():
                    self._value_()
                    self.add_last_node_to_name('coefficient')
                self._error(
                    'expecting one of: '
                    '<dev> <value>'
                )
        self._join(block5, sep5)

        self._define(
            ['sep', 'value'],
            ['coefficient', 'device']
        )

    @tatsumasu('CurrentSource')
    def _current_source_(self):  # noqa
        with self._if():
            self._token('I')
        self._cut()
        self._dev_()
        self.name_last_node('dev')
        self._sep_()
        self.name_last_node('sep')
        self._node_()
        self.name_last_node('positive')
        self._sep_()
        self.name_last_node('sep')
        self._node_()
        self.name_last_node('negative')
        self._cut()
        with self._optional():
            self._sep_()
            self.name_last_node('sep')
            with self._optional():
                self._dc_()
                self._cut()
                self._sep_()
                self.name_last_node('sep')

                self._define(
                    ['sep'],
                    []
                )
            self._gen_expr_()
            self.name_last_node('dc_value')

            self._define(
                ['dc_value', 'sep'],
                []
            )
        with self._optional():
            self._sep_()
            self.name_last_node('sep')
            self._ac_()
            self._cut()
            with self._optional():
                self._sep_()
                self.name_last_node('sep')
                self._gen_expr_()
                self.name_last_node('ac_magnitude')
                with self._optional():
                    self._sep_()
                    self.name_last_node('sep')
                    self._gen_expr_()
                    self.name_last_node('ac_phase')

                    self._define(
                        ['ac_phase', 'sep'],
                        []
                    )

                self._define(
                    ['ac_magnitude', 'ac_phase', 'sep'],
                    []
                )

            self._define(
                ['ac_magnitude', 'ac_phase', 'sep'],
                []
            )
        with self._optional():
            self._sep_()
            self.name_last_node('sep')
            self._transient_specification_()
            self.name_last_node('transient')

            self._define(
                ['sep', 'transient'],
                []
            )

        self._define(
            ['ac_magnitude', 'ac_phase', 'dc_value', 'dev', 'negative', 'positive', 'sep', 'transient'],
            []
        )

    @tatsumasu('JFET')
    def _jfet_(self):  # noqa
        with self._if():
            self._token('J')
        self._cut()
        self._dev_()
        self.name_last_node('dev')
        self._sep_()
        self.name_last_node('sep')
        self._node_()
        self.name_last_node('drain')
        self._sep_()
        self.name_last_node('sep')
        self._node_()
        self.name_last_node('gate')
        self._sep_()
        self.name_last_node('sep')
        self._node_()
        self.name_last_node('source')
        self._cut()
        self._sep_()
        self.name_last_node('sep')
        self._model_name_()
        self.name_last_node('model')
        with self._optional():
            self._sep_()
            self.name_last_node('sep')
            self._gen_expr_()
            self.name_last_node('area')

            self._define(
                ['area', 'sep'],
                []
            )
        with self._optional():
            self._sep_()
            self.name_last_node('sep')
            self._parameters_()
            self.name_last_node('parameters')

            self._define(
                ['parameters', 'sep'],
                []
            )

        self._define(
            ['area', 'dev', 'drain', 'gate', 'model', 'parameters', 'sep', 'source'],
            []
        )

    @tatsumasu('MutualInductor')
    def _mutual_inductor_(self):  # noqa
        with self._if():
            self._token('K')
        self._cut()
        self._dev_()
        self.name_last_node('dev')

        def block1():
            self._sep_()
            self.name_last_node('sep')
            with self._if():
                self._token('L')
            self._dev_()
            self.add_last_node_to_name('inductor')

            self._define(
                ['sep'],
                ['inductor']
            )
        self._positive_closure(block1)
        self._sep_()
        self.name_last_node('sep')
        self._gen_expr_()
        self.name_last_node('value')
        with self._optional():
            self._sep_()
            self.name_last_node('sep')
            self._model_name_()
            self.name_last_node('model')

            self._define(
                ['model', 'sep'],
                []
            )

        self._define(
            ['dev', 'model', 'sep', 'value'],
            ['inductor']
        )

    @tatsumasu('Inductor')
    def _inductor_(self):  # noqa
        with self._if():
            self._token('L')
        self._cut()
        self._dev_()
        self.name_last_node('dev')
        self._sep_()
        self.name_last_node('sep')
        self._node_()
        self.name_last_node('positive')
        self._sep_()
        self.name_last_node('sep')
        self._node_()
        self.name_last_node('negative')
        self._cut()
        with self._optional():
            with self._choice():
                with self._option():
                    self._sep_()
                    self.name_last_node('sep')
                    self._gen_expr_()
                    self.name_last_node('value')
                    with self._optional():
                        self._sep_()
                        self.name_last_node('sep')
                        self._model_name_()
                        self.name_last_node('model')

                        self._define(
                            ['model', 'sep'],
                            []
                        )

                    self._define(
                        ['model', 'sep', 'value'],
                        []
                    )
                with self._option():
                    self._sep_()
                    self.name_last_node('sep')
                    self._model_name_()
                    self.name_last_node('model')
                    with self._optional():
                        self._sep_()
                        self.name_last_node('sep')
                        self._gen_expr_()
                        self.name_last_node('value')

                        self._define(
                            ['sep', 'value'],
                            []
                        )

                    self._define(
                        ['model', 'sep', 'value'],
                        []
                    )
                self._error(
                    'expecting one of: '
                    '<sep>'
                )
        with self._optional():
            self._sep_()
            self.name_last_node('sep')
            self._parameters_()
            self.name_last_node('parameters')

            self._define(
                ['parameters', 'sep'],
                []
            )

        self._define(
            ['dev', 'model', 'negative', 'parameters', 'positive', 'sep', 'value'],
            []
        )

    @tatsumasu('MOSFET')
    def _mosfet_(self):  # noqa
        with self._if():
            self._token('M')
        self._cut()
        self._dev_()
        self.name_last_node('dev')
        self._sep_()
        self.name_last_node('sep')
        self._node_()
        self.name_last_node('drain')
        self._sep_()
        self.name_last_node('sep')
        self._node_()
        self.name_last_node('gate')
        self._sep_()
        self.name_last_node('sep')
        self._node_()
        self.name_last_node('source')
        self._cut()
        self._sep_()
        self.name_last_node('sep')
        self._node_()
        self.name_last_node('bulk')
        self._sep_()
        self.name_last_node('sep')
        self._model_name_()
        self.name_last_node('model')
        with self._optional():
            self._sep_()
            self.name_last_node('sep')

            def sep12():
                with self._group():
                    self._sep_()
                    self.name_last_node('sep')

            def block12():
                with self._group():
                    with self._choice():
                        with self._option():
                            self._token('IC')
                            self.name_last_node('name')
                            with self._optional():
                                self._sep_()
                                self.name_last_node('sep')
                            self._token('=')
                            self._cut()
                            with self._optional():
                                self._sep_()
                                self.name_last_node('sep')

                            def sep19():
                                with self._group():
                                    with self._optional():
                                        self._sep_()
                                        self.name_last_node('sep')
                                    self._comma_()
                                    with self._optional():
                                        self._sep_()
                                        self.name_last_node('sep')

                                    self._define(
                                        ['sep'],
                                        []
                                    )

                            def block19():
                                self._value_()
                                self.name_last_node('value')
                            self._join(block19, sep19)

                            self._define(
                                ['name', 'sep', 'value'],
                                []
                            )
                        with self._option():
                            self._parameter_()
                            self.name_last_node('parameter')
                        self._error(
                            'expecting one of: '
                            "'IC' <parameter>"
                        )
                self.name_last_node('param')
            self._join(block12, sep12)

            self._define(
                ['name', 'param', 'parameter', 'sep', 'value'],
                []
            )

        self._define(
            ['bulk', 'dev', 'drain', 'gate', 'model', 'name', 'param', 'parameter', 'sep', 'source', 'value'],
            []
        )

    @tatsumasu('BJT')
    def _bjt_(self):  # noqa
        with self._if():
            self._token('Q')
        self._cut()
        self._dev_()
        self.name_last_node('dev')
        self._sep_()
        self.name_last_node('sep')
        self._node_()
        self.name_last_node('collector')
        self._sep_()
        self.name_last_node('sep')
        self._node_()
        self.name_last_node('base')
        self._sep_()
        self.name_last_node('sep')
        self._node_()
        self.name_last_node('emitter')
        self._cut()
        self._sep_()
        self.name_last_node('sep')
        with self._optional():
            self._substrate_node_()
            self.name_last_node('substrate')
            self._sep_()
            self.name_last_node('sep')

            self._define(
                ['sep', 'substrate'],
                []
            )
        with self._optional():
            self._token('DT')
            self.name_last_node('thermal')
            self._sep_()
            self.name_last_node('sep')

            self._define(
                ['sep', 'thermal'],
                []
            )
        self._model_name_()
        self.name_last_node('model')
        with self._optional():
            self._sep_()
            self.name_last_node('sep')
            self._gen_expr_()
            self.name_last_node('area')

            self._define(
                ['area', 'sep'],
                []
            )
        with self._optional():
            self._sep_()
            self.name_last_node('sep')
            self._parameters_()
            self.name_last_node('parameters')

            self._define(
                ['parameters', 'sep'],
                []
            )

        self._define(
            ['area', 'base', 'collector', 'dev', 'emitter', 'model', 'parameters', 'sep', 'substrate', 'thermal'],
            []
        )

    @tatsumasu('SubstrateNode')
    def _substrate_node_(self):  # noqa
        with self._group():
            with self._choice():
                with self._option():
                    self._pattern('[0-9]+')
                with self._option():
                    with self._if():
                        self._token('[')
                    self._cut()
                    self._node_()
                self._error(
                    'expecting one of: '
                    "'[' [0-9]+"
                )
        self.name_last_node('substrate')

    @tatsumasu('Resistor')
    def _resistor_(self):  # noqa
        with self._if():
            self._token('R')
        self._cut()
        self._dev_()
        self.name_last_node('dev')
        self._sep_()
        self.name_last_node('sep')
        self._node_()
        self.name_last_node('positive')
        self._sep_()
        self.name_last_node('sep')
        self._node_()
        self.name_last_node('negative')
        self._cut()
        with self._optional():
            with self._choice():
                with self._option():
                    self._sep_()
                    self.name_last_node('sep')
                    self._gen_expr_()
                    self.name_last_node('value')
                    with self._optional():
                        self._sep_()
                        self.name_last_node('sep')
                        self._model_name_()
                        self.name_last_node('model')

                        self._define(
                            ['model', 'sep'],
                            []
                        )

                    self._define(
                        ['model', 'sep', 'value'],
                        []
                    )
                with self._option():
                    self._sep_()
                    self.name_last_node('sep')
                    self._model_name_()
                    self.name_last_node('model')
                    with self._optional():
                        self._sep_()
                        self.name_last_node('sep')
                        self._gen_expr_()
                        self.name_last_node('value')

                        self._define(
                            ['sep', 'value'],
                            []
                        )

                    self._define(
                        ['model', 'sep', 'value'],
                        []
                    )
                self._error(
                    'expecting one of: '
                    '<sep>'
                )
        with self._optional():
            self._sep_()
            self.name_last_node('sep')
            self._parameters_()
            self.name_last_node('parameters')

            self._define(
                ['parameters', 'sep'],
                []
            )

        self._define(
            ['dev', 'model', 'negative', 'parameters', 'positive', 'sep', 'value'],
            []
        )

    @tatsumasu('Switch')
    def _switch_(self):  # noqa
        with self._if():
            self._token('S')
        self._cut()
        self._dev_()
        self.name_last_node('dev')
        self._sep_()
        self.name_last_node('sep')
        self._node_()
        self.name_last_node('positive')
        self._sep_()
        self.name_last_node('sep')
        self._node_()
        self.name_last_node('negative')
        self._cut()
        self._sep_()
        self.name_last_node('sep')
        with self._group():
            with self._choice():
                with self._option():
                    self._model_name_()
                    self.name_last_node('model')
                    with self._optional():
                        self._sep_()
                        self.name_last_node('sep')
                        with self._group():
                            with self._choice():
                                with self._option():
                                    self._token('ON')
                                with self._option():
                                    self._token('OFF')
                                self._error(
                                    'expecting one of: '
                                    "'OFF' 'ON'"
                                )
                        self.name_last_node('initial_state')

                        self._define(
                            ['initial_state', 'sep'],
                            []
                        )
                    self._sep_()
                    self.name_last_node('sep')
                    self._token('control')
                    self._cut()
                    with self._optional():
                        self._sep_()
                        self.name_last_node('sep')
                    self._token('=')
                    with self._optional():
                        self._sep_()
                        self.name_last_node('sep')
                    self._braced_expression_()

                    self._define(
                        ['initial_state', 'model', 'sep'],
                        []
                    )
                with self._option():
                    self._node_()
                    self.name_last_node('control_p')
                    self._sep_()
                    self.name_last_node('sep')
                    self._node_()
                    self.name_last_node('control_n')
                    self._sep_()
                    self.name_last_node('sep')
                    self._model_name_()
                    self.name_last_node('model')
                    with self._optional():
                        self._sep_()
                        self.name_last_node('sep')
                        with self._group():
                            with self._choice():
                                with self._option():
                                    self._token('ON')
                                with self._option():
                                    self._token('OFF')
                                self._error(
                                    'expecting one of: '
                                    "'OFF' 'ON'"
                                )
                        self.name_last_node('initial_state')

                        self._define(
                            ['initial_state', 'sep'],
                            []
                        )

                    self._define(
                        ['control_n', 'control_p', 'initial_state', 'model', 'sep'],
                        []
                    )
                self._error(
                    'expecting one of: '
                    '<model_name> <node>'
                )

        self._define(
            ['control_n', 'control_p', 'dev', 'initial_state', 'model', 'negative', 'positive', 'sep'],
            []
        )

    @tatsumasu('Subcircuit')
    def _subcircuit_(self):  # noqa
        with self._if():
            self._token('X')
        self._cut()
        self._dev_()
        self.name_last_node('dev')

        def block1():
            self._sep_()
            self.name_last_node('sep')
            self._node_()
            self.add_last_node_to_name('node')

            self._define(
                ['sep'],
                ['node']
            )
        self._closure(block1)
        with self._optional():
            self._token(':')
            self.name_last_node('params')
            self._cut()
            with self._optional():
                self._sep_()
                self.name_last_node('sep')
            self._parameters_()
            self.name_last_node('parameters')

            self._define(
                ['parameters', 'params', 'sep'],
                []
            )

        self._define(
            ['dev', 'parameters', 'params', 'sep'],
            ['node']
        )

    @tatsumasu('VoltageSource')
    def _voltage_source_(self):  # noqa
        with self._if():
            self._token('V')
        self._cut()
        self._dev_()
        self.name_last_node('dev')
        self._sep_()
        self.name_last_node('sep')
        self._node_()
        self.name_last_node('positive')
        self._sep_()
        self.name_last_node('sep')
        self._node_()
        self.name_last_node('negative')
        self._cut()
        with self._optional():
            self._sep_()
            self.name_last_node('sep')
            with self._optional():
                self._dc_()
                self._cut()
                self._sep_()
                self.name_last_node('sep')

                self._define(
                    ['sep'],
                    []
                )
            self._gen_expr_()
            self.name_last_node('dc_value')

            self._define(
                ['dc_value', 'sep'],
                []
            )
        with self._optional():
            self._sep_()
            self.name_last_node('sep')
            self._ac_()
            self._cut()
            with self._optional():
                self._sep_()
                self.name_last_node('sep')
                self._gen_expr_()
                self.name_last_node('ac_magnitude')
                with self._optional():
                    self._sep_()
                    self.name_last_node('sep')
                    self._gen_expr_()
                    self.name_last_node('ac_phase')

                    self._define(
                        ['ac_phase', 'sep'],
                        []
                    )

                self._define(
                    ['ac_magnitude', 'ac_phase', 'sep'],
                    []
                )

            self._define(
                ['ac_magnitude', 'ac_phase', 'sep'],
                []
            )
        with self._optional():
            self._sep_()
            self.name_last_node('sep')
            self._transient_specification_()
            self.name_last_node('transient')

            self._define(
                ['sep', 'transient'],
                []
            )

        self._define(
            ['ac_magnitude', 'ac_phase', 'dc_value', 'dev', 'negative', 'positive', 'sep', 'transient'],
            []
        )

    @tatsumasu()
    def _dc_(self):  # noqa
        self._token('DC')

    @tatsumasu()
    def _ac_(self):  # noqa
        self._token('AC')

    @tatsumasu('TransientSpecification')
    def _transient_specification_(self):  # noqa
        with self._choice():
            with self._option():
                self._transient_pulse_()
                self.name_last_node('@')
            with self._option():
                self._transient_sin_()
                self.name_last_node('@')
            with self._option():
                self._transient_exp_()
                self.name_last_node('@')
            with self._option():
                self._transient_pat_()
                self.name_last_node('@')
            with self._option():
                self._transient_pwl_()
                self.name_last_node('@')
            with self._option():
                self._transient_sffm_()
                self.name_last_node('@')
            self._error(
                'expecting one of: '
                "'EXP' 'PAT' 'PULSE' 'PWL' 'SFFM' 'SIN'"
                '<transient_exp> <transient_pat>'
                '<transient_pulse> <transient_pwl>'
                '<transient_sffm> <transient_sin>'
            )

    @tatsumasu('TransientPulse')
    def _transient_pulse_(self):  # noqa
        self._token('PULSE')
        self.name_last_node('type')
        with self._group():
            with self._choice():
                with self._option():
                    with self._optional():
                        self._sep_()
                        self.name_last_node('sep')
                    self._lp_()
                    self._cut()
                    with self._optional():
                        self._sep_()
                        self.name_last_node('sep')
                    self._pulse_arguments_()
                    self.name_last_node('@')
                    with self._optional():
                        self._sep_()
                        self.name_last_node('sep')
                    self._rp_()

                    self._define(
                        ['sep'],
                        []
                    )
                with self._option():
                    self._sep_()
                    self.name_last_node('sep')
                    self._pulse_arguments_()
                    self.name_last_node('@')

                    self._define(
                        ['sep'],
                        []
                    )
                self._error(
                    'expecting one of: '
                    '<lp> <sep>'
                )

        self._define(
            ['sep', 'type'],
            []
        )

    @tatsumasu('PulseArguments')
    def _pulse_arguments_(self):  # noqa
        self._gen_expr_()
        self.name_last_node('v1')
        self._sep_()
        self.name_last_node('sep')

        def sep2():
            with self._group():
                self._sep_()
                self.name_last_node('sep')

        def block2():
            self._gen_expr_()
            self.name_last_node('value')
        self._join(block2, sep2)

        self._define(
            ['sep', 'v1', 'value'],
            []
        )

    @tatsumasu('TransientSin')
    def _transient_sin_(self):  # noqa
        self._token('SIN')
        self.name_last_node('type')
        with self._group():
            with self._choice():
                with self._option():
                    with self._optional():
                        self._sep_()
                        self.name_last_node('sep')
                    self._lp_()
                    self._cut()
                    with self._optional():
                        self._sep_()
                        self.name_last_node('sep')
                    self._sin_arguments_()
                    self.name_last_node('@')
                    with self._optional():
                        self._sep_()
                        self.name_last_node('sep')
                    self._rp_()

                    self._define(
                        ['sep'],
                        []
                    )
                with self._option():
                    self._sep_()
                    self.name_last_node('sep')
                    self._sin_arguments_()
                    self.name_last_node('@')

                    self._define(
                        ['sep'],
                        []
                    )
                self._error(
                    'expecting one of: '
                    '<lp> <sep>'
                )

        self._define(
            ['sep', 'type'],
            []
        )

    @tatsumasu('SinArguments')
    def _sin_arguments_(self):  # noqa
        self._gen_expr_()
        self.name_last_node('v0')
        self._sep_()
        self.name_last_node('sep')
        self._gen_expr_()
        self.name_last_node('va')
        self._sep_()
        self.name_last_node('sep')
        self._gen_expr_()
        self.name_last_node('freq')
        self._sep_()
        self.name_last_node('sep')

        def sep6():
            with self._group():
                self._sep_()
                self.name_last_node('sep')

        def block6():
            self._gen_expr_()
            self.name_last_node('value')
        self._join(block6, sep6)

        self._define(
            ['freq', 'sep', 'v0', 'va', 'value'],
            []
        )

    @tatsumasu('TransientExp')
    def _transient_exp_(self):  # noqa
        self._token('EXP')
        self.name_last_node('type')
        with self._group():
            with self._choice():
                with self._option():
                    with self._optional():
                        self._sep_()
                        self.name_last_node('sep')
                    self._lp_()
                    self._cut()
                    with self._optional():
                        self._sep_()
                        self.name_last_node('sep')
                    self._exp_arguments_()
                    self.name_last_node('@')
                    with self._optional():
                        self._sep_()
                        self.name_last_node('sep')
                    self._rp_()

                    self._define(
                        ['sep'],
                        []
                    )
                with self._option():
                    self._sep_()
                    self.name_last_node('sep')
                    self._exp_arguments_()
                    self.name_last_node('@')

                    self._define(
                        ['sep'],
                        []
                    )
                self._error(
                    'expecting one of: '
                    '<lp> <sep>'
                )

        self._define(
            ['sep', 'type'],
            []
        )

    @tatsumasu('ExpArguments')
    def _exp_arguments_(self):  # noqa
        self._gen_expr_()
        self.name_last_node('v1')
        self._sep_()
        self.name_last_node('sep')
        self._gen_expr_()
        self.name_last_node('v2')
        self._sep_()
        self.name_last_node('sep')

        def sep4():
            with self._group():
                self._sep_()
                self.name_last_node('sep')

        def block4():
            self._gen_expr_()
            self.name_last_node('value')
        self._join(block4, sep4)

        self._define(
            ['sep', 'v1', 'v2', 'value'],
            []
        )

    @tatsumasu('TransientPat')
    def _transient_pat_(self):  # noqa
        self._token('PAT')
        self.name_last_node('type')
        with self._group():
            with self._choice():
                with self._option():
                    with self._optional():
                        self._sep_()
                        self.name_last_node('sep')
                    self._lp_()
                    self._cut()
                    with self._optional():
                        self._sep_()
                        self.name_last_node('sep')
                    self._pat_arguments_()
                    self.name_last_node('@')
                    with self._optional():
                        self._sep_()
                        self.name_last_node('sep')
                    self._rp_()

                    self._define(
                        ['sep'],
                        []
                    )
                with self._option():
                    self._sep_()
                    self.name_last_node('sep')
                    self._pat_arguments_()
                    self.name_last_node('@')

                    self._define(
                        ['sep'],
                        []
                    )
                self._error(
                    'expecting one of: '
                    '<lp> <sep>'
                )

        self._define(
            ['sep', 'type'],
            []
        )

    @tatsumasu('PatArguments')
    def _pat_arguments_(self):  # noqa
        self._gen_expr_()
        self.name_last_node('vhi')
        self._sep_()
        self.name_last_node('sep')
        self._gen_expr_()
        self.name_last_node('vlo')
        self._sep_()
        self.name_last_node('sep')
        self._gen_expr_()
        self.name_last_node('td')
        self._sep_()
        self.name_last_node('sep')
        self._gen_expr_()
        self.name_last_node('tr')
        self._sep_()
        self.name_last_node('sep')
        self._gen_expr_()
        self.name_last_node('tf')
        self._sep_()
        self.name_last_node('sep')
        self._gen_expr_()
        self.name_last_node('tsample')
        self._sep_()
        self.name_last_node('sep')
        self._binary_pattern_()
        self.name_last_node('data')
        with self._optional():
            self._sep_()
            self.name_last_node('sep')
            self._binary_()
            self.name_last_node('repeat')

            self._define(
                ['repeat', 'sep'],
                []
            )

        self._define(
            ['data', 'repeat', 'sep', 'td', 'tf', 'tr', 'tsample', 'vhi', 'vlo'],
            []
        )

    @tatsumasu('TransientPWL')
    def _transient_pwl_(self):  # noqa
        self._token('PWL')
        self.name_last_node('type')
        self._cut()
        with self._group():
            with self._choice():
                with self._option():
                    self._pwl_file_arguments_()
                    self.name_last_node('@')
                with self._option():
                    self._pwl_arguments_()
                    self.name_last_node('@')
                self._error(
                    'expecting one of: '
                    '<pwl_arguments> <pwl_file_arguments>'
                )

        self._define(
            ['type'],
            []
        )

    @tatsumasu('PWLFileArguments')
    def _pwl_file_arguments_(self):  # noqa
        self._sep_()
        self.name_last_node('sep')
        self._token('FILE')
        self._cut()
        self._sep_()
        self.name_last_node('sep')
        with self._group():
            with self._choice():
                with self._option():
                    self._double_quote_()
                    self._filename_()
                    self.name_last_node('filename')
                    self._double_quote_()

                    self._define(
                        ['filename'],
                        []
                    )
                with self._option():
                    self._filename_()
                    self.name_last_node('filename')
                self._error(
                    'expecting one of: '
                    '<double_quote> <filename>'
                )
        with self._optional():
            self._sep_()
            self.name_last_node('sep')
            self._parameters_()
            self.name_last_node('parameters')

            self._define(
                ['parameters', 'sep'],
                []
            )

        self._define(
            ['filename', 'parameters', 'sep'],
            []
        )

    @tatsumasu('PWLArguments')
    def _pwl_arguments_(self):  # noqa
        with self._group():
            with self._choice():
                with self._option():

                    def block1():
                        self._sep_()
                        self.name_last_node('sep')
                    self._closure(block1)
                    self._lp_()
                    self._cut()

                    def block3():
                        self._sep_()
                        self.name_last_node('sep')
                    self._closure(block3)
                    self._value_()
                    self.name_last_node('t')
                    self._sep_()
                    self.name_last_node('sep')
                    self._value_()
                    self.name_last_node('value')

                    def block8():
                        self._sep_()
                        self.name_last_node('sep')
                        self._value_()
                        self.name_last_node('t')
                        self._sep_()
                        self.name_last_node('sep')
                        self._value_()
                        self.name_last_node('value')

                        self._define(
                            ['sep', 't', 'value'],
                            []
                        )
                    self._closure(block8)
                    with self._optional():
                        self._sep_()
                        self.name_last_node('sep')
                        self._parameters_()
                        self.name_last_node('parameters')

                        self._define(
                            ['parameters', 'sep'],
                            []
                        )

                    def block15():
                        self._sep_()
                        self.name_last_node('sep')
                    self._closure(block15)
                    self._rp_()

                    self._define(
                        ['parameters', 'sep', 't', 'value'],
                        []
                    )
                with self._option():

                    def block17():
                        self._sep_()
                        self.name_last_node('sep')
                        self._value_()
                        self.name_last_node('t')
                        self._sep_()
                        self.name_last_node('sep')
                        self._value_()
                        self.name_last_node('value')

                        self._define(
                            ['sep', 't', 'value'],
                            []
                        )
                    self._positive_closure(block17)
                self._error(
                    'expecting one of: '
                    '<lp> <sep>'
                )
        with self._optional():
            self._sep_()
            self.name_last_node('sep')
            self._parameters_()
            self.name_last_node('parameters')

            self._define(
                ['parameters', 'sep'],
                []
            )

        self._define(
            ['parameters', 'sep', 't', 'value'],
            []
        )

    @tatsumasu('TransientSFFM')
    def _transient_sffm_(self):  # noqa
        self._token('SFFM')
        self.name_last_node('type')
        with self._group():
            with self._choice():
                with self._option():
                    with self._optional():
                        self._sep_()
                        self.name_last_node('sep')
                    self._lp_()
                    self._cut()
                    with self._optional():
                        self._sep_()
                        self.name_last_node('sep')
                    self._sffm_arguments_()
                    self.name_last_node('@')
                    with self._optional():
                        self._sep_()
                        self.name_last_node('sep')
                    self._rp_()

                    self._define(
                        ['sep'],
                        []
                    )
                with self._option():
                    self._sep_()
                    self.name_last_node('sep')
                    self._sffm_arguments_()
                    self.name_last_node('@')

                    self._define(
                        ['sep'],
                        []
                    )
                self._error(
                    'expecting one of: '
                    '<lp> <sep>'
                )

        self._define(
            ['sep', 'type'],
            []
        )

    @tatsumasu('SFFMArguments')
    def _sffm_arguments_(self):  # noqa
        self._gen_expr_()
        self.name_last_node('v0')
        self._sep_()
        self.name_last_node('sep')
        self._gen_expr_()
        self.name_last_node('va')
        self._sep_()
        self.name_last_node('sep')

        def sep4():
            with self._group():
                self._sep_()
                self.name_last_node('sep')

        def block4():
            self._gen_expr_()
            self.name_last_node('value')
        self._join(block4, sep4)

        self._define(
            ['sep', 'v0', 'va', 'value'],
            []
        )

    @tatsumasu('Command')
    def _command_(self):  # noqa
        with self._choice():
            with self._option():
                self._embedded_sampling_cmd_()
                self.name_last_node('@')
            with self._option():
                self._include_cmd_()
                self.name_last_node('@')
            with self._option():
                self._lib_cmd_()
                self.name_last_node('@')
            with self._option():
                self._netlist_cmds_()
                self.name_last_node('@')
            with self._option():
                self._subckt_cmd_()
                self.name_last_node('@')
            with self._option():
                self._simulator_cmd_()
                self.name_last_node('@')
            with self._option():
                self._title_cmd_()
                self.name_last_node('@')
            with self._option():
                self._ac_cmd_()
                self.name_last_node('@')
            with self._option():
                self._dc_cmd_()
                self.name_last_node('@')
            self._error(
                'expecting one of: '
                "'.AC' '.DC' '.EMBEDDEDSAMPLING' '.INC'"
                "'.INCL' '.INCLUDE' '.LIB' '.SIMULATOR'"
                "'.SUBCKT' '.TITLE' <ac_cmd> <data_cmd>"
                '<dc_cmd> <embedded_sampling_cmd>'
                '<ic_cmd> <include_cmd> <lib_cmd>'
                '<model_cmd> <netlist_cmds> <param_cmd>'
                '<simulator_cmd> <subckt_cmd> <title_cmd>'
            )

    @tatsumasu('NetlistCmds')
    def _netlist_cmds_(self):  # noqa
        with self._choice():
            with self._option():
                self._data_cmd_()
                self.name_last_node('@')
            with self._option():
                self._ic_cmd_()
                self.name_last_node('@')
            with self._option():
                self._model_cmd_()
                self.name_last_node('@')
            with self._option():
                self._param_cmd_()
                self.name_last_node('@')
            with self._option():
                self._subckt_cmd_()
                self.name_last_node('@')
            self._error(
                'expecting one of: '
                "'.DATA' '.DCVOLT' '.IC' '.MODEL'"
                "'.PARAM' '.SUBCKT' <data_cmd> <ic_cmd>"
                '<model_cmd> <param_cmd> <subckt_cmd>'
            )

    @tatsumasu('ACCmd')
    def _ac_cmd_(self):  # noqa
        self._token('.AC')
        self.name_last_node('cmd')
        self._cut()
        self._sep_()
        self.name_last_node('sep')
        with self._group():
            with self._choice():
                with self._option():
                    with self._group():
                        self._ac_sweep_type_()
                        self.name_last_node('sweep')
                        self._sep_()
                        self.name_last_node('sep')
                        self._integer_()
                        self.name_last_node('points')
                        self._sep_()
                        self.name_last_node('sep')
                        self._value_()
                        self.name_last_node('start')
                        self._sep_()
                        self.name_last_node('sep')
                        self._value_()
                        self.name_last_node('end')

                        self._define(
                            ['end', 'points', 'sep', 'start', 'sweep'],
                            []
                        )
                with self._option():
                    with self._group():
                        self._token('DATA')
                        self.name_last_node('sweep')

                        def block11():
                            self._st_()
                        self._closure(block11)
                        self._token('=')

                        def block12():
                            self._st_()
                        self._closure(block12)
                        self._id_()
                        self.name_last_node('table')

                        self._define(
                            ['sweep', 'table'],
                            []
                        )
                self._error(
                    'expecting one of: '
                    "'DATA' <ac_sweep_type>"
                )

        self._define(
            ['cmd', 'end', 'points', 'sep', 'start', 'sweep', 'table'],
            []
        )

    @tatsumasu()
    def _ac_sweep_type_(self):  # noqa
        with self._choice():
            with self._option():
                self._token('LIN')
            with self._option():
                self._token('OCT')
            with self._option():
                self._token('DEC')
            self._error(
                'expecting one of: '
                "'DEC' 'LIN' 'OCT'"
            )

    @tatsumasu('DataCmd')
    def _data_cmd_(self):  # noqa
        self._token('.DATA')
        self.name_last_node('cmd')
        self._cut()
        self._sep_()
        self.name_last_node('sep')
        self._id_()
        self.name_last_node('table')

        def block3():
            self._sep_()
            self.name_last_node('sep')
            self._id_()
            self.name_last_node('name')

            self._define(
                ['name', 'sep'],
                []
            )
        self._positive_closure(block3)

        def block6():
            self._sep_()
            self.name_last_node('sep')
            self._value_()
            self.name_last_node('value')

            self._define(
                ['sep', 'value'],
                []
            )
        self._positive_closure(block6)
        self._end_sep_()
        self.name_last_node('sep')
        self._token('.ENDDATA')

        self._define(
            ['cmd', 'name', 'sep', 'table', 'value'],
            []
        )

    @tatsumasu('DCCmd')
    def _dc_cmd_(self):  # noqa
        self._token('.DC')
        self.name_last_node('cmd')
        with self._group():
            with self._choice():
                with self._option():
                    with self._group():
                        self._sep_()
                        self.name_last_node('sep')
                        self._token('DATA')
                        self.name_last_node('sweep')

                        def block4():
                            self._st_()
                        self._closure(block4)
                        self._token('=')

                        def block5():
                            self._st_()
                        self._closure(block5)
                        self._id_()
                        self.name_last_node('table')

                        self._define(
                            ['sep', 'sweep', 'table'],
                            []
                        )
                with self._option():
                    with self._group():

                        def block7():
                            with self._choice():
                                with self._option():
                                    with self._group():
                                        with self._optional():
                                            self._sep_()
                                            self.name_last_node('sep')
                                            self._token('LIN')
                                            self.name_last_node('sweep')

                                            self._define(
                                                ['sep', 'sweep'],
                                                []
                                            )
                                        self._sep_()
                                        self.name_last_node('sep')
                                        self._id_()
                                        self.name_last_node('name')
                                        self._sep_()
                                        self.name_last_node('sep')
                                        self._value_()
                                        self.name_last_node('start')
                                        self._sep_()
                                        self.name_last_node('sep')
                                        self._value_()
                                        self.name_last_node('stop')
                                        self._sep_()
                                        self.name_last_node('sep')
                                        self._value_()
                                        self.name_last_node('step')

                                        self._define(
                                            ['name', 'sep', 'start', 'step', 'stop', 'sweep'],
                                            []
                                        )
                                with self._option():
                                    with self._group():
                                        self._sep_()
                                        self.name_last_node('sep')
                                        with self._group():
                                            with self._choice():
                                                with self._option():
                                                    self._token('DEC')
                                                with self._option():
                                                    self._token('OCT')
                                                self._error(
                                                    'expecting one of: '
                                                    "'DEC' 'OCT'"
                                                )
                                        self.name_last_node('sweep')
                                        self._sep_()
                                        self.name_last_node('sep')
                                        self._id_()
                                        self.name_last_node('name')
                                        self._sep_()
                                        self.name_last_node('sep')
                                        self._value_()
                                        self.name_last_node('start')
                                        self._sep_()
                                        self.name_last_node('sep')
                                        self._value_()
                                        self.name_last_node('stop')
                                        self._sep_()
                                        self.name_last_node('sep')
                                        self._integer_()
                                        self.name_last_node('points')

                                        self._define(
                                            ['name', 'points', 'sep', 'start', 'stop', 'sweep'],
                                            []
                                        )
                                with self._option():
                                    with self._group():
                                        self._sep_()
                                        self.name_last_node('sep')
                                        self._id_()
                                        self.name_last_node('name')
                                        self._sep_()
                                        self.name_last_node('sep')
                                        self._token('LIST')
                                        self.name_last_node('sweep')
                                        self._sep_()
                                        self.name_last_node('sep')

                                        def sep35():
                                            with self._group():
                                                self._sep_()
                                                self.name_last_node('sep')

                                        def block35():
                                            self._value_()
                                            self.name_last_node('point')
                                        self._positive_join(block35, sep35)

                                        self._define(
                                            ['name', 'point', 'sep', 'sweep'],
                                            []
                                        )
                                self._error(
                                    'expecting one of: '
                                    '<sep>'
                                )
                        self._positive_closure(block7)
                self._error(
                    'expecting one of: '
                    '<sep>'
                )

        self._define(
            ['cmd', 'name', 'point', 'points', 'sep', 'start', 'step', 'stop', 'sweep', 'table'],
            []
        )

    @tatsumasu('EmbeddedSamplingCmd')
    def _embedded_sampling_cmd_(self):  # noqa
        self._token('.EMBEDDEDSAMPLING')
        self.name_last_node('cmd')
        self._cut()
        with self._group():
            with self._choice():
                with self._option():
                    with self._group():
                        self._sep_()
                        self.name_last_node('sep')
                        self._token('param')
                        self.name_last_node('parameter')

                        def block4():
                            self._st_()
                        self._closure(block4)
                        self._token('=')

                        def block5():
                            self._st_()
                        self._closure(block5)

                        def sep6():
                            with self._group():
                                self._es_sep_()

                        def block6():
                            self._id_()
                            self.name_last_node('name')
                        self._positive_join(block6, sep6)
                        self._sep_()
                        self.name_last_node('sep')
                        self._token('type')
                        self.name_last_node('parameter')

                        def block10():
                            self._st_()
                        self._closure(block10)
                        self._token('=')

                        def block11():
                            self._st_()
                        self._closure(block11)

                        def sep12():
                            with self._group():
                                self._es_sep_()

                        def block12():
                            self._es_parameter_type_()
                            self.name_last_node('type')
                        self._positive_join(block12, sep12)

                        def block14():
                            self._sep_()
                            self.name_last_node('sep')
                            self._es_parameter_name_()
                            self.name_last_node('parameter')

                            def block17():
                                self._st_()
                            self._closure(block17)
                            self._token('=')

                            def block18():
                                self._st_()
                            self._closure(block18)

                            def sep19():
                                with self._group():
                                    self._es_sep_()

                            def block19():
                                self._gen_expr_()
                                self.name_last_node('value')
                            self._positive_join(block19, sep19)

                            self._define(
                                ['parameter', 'sep', 'value'],
                                []
                            )
                        self._closure(block14)

                        self._define(
                            ['name', 'parameter', 'sep', 'type', 'value'],
                            []
                        )
                with self._option():
                    with self._group():
                        self._sep_()
                        self.name_last_node('sep')
                        self._token('useExpr')
                        self.name_last_node('parameter')

                        def block23():
                            self._st_()
                        self._closure(block23)
                        self._token('=')
                        self._cut()

                        def block24():
                            self._st_()
                        self._closure(block24)
                        self._boolean_()
                        self.name_last_node('value')

                        self._define(
                            ['parameter', 'sep', 'value'],
                            []
                        )
                self._error(
                    'expecting one of: '
                    '<sep>'
                )

        self._define(
            ['cmd', 'name', 'parameter', 'sep', 'type', 'value'],
            []
        )

    @tatsumasu()
    def _es_parameter_type_(self):  # noqa
        with self._choice():
            with self._option():
                self._token('UNIFORM')
            with self._option():
                self._token('NORMAL')
            with self._option():
                self._token('GAMMA')
            self._error(
                'expecting one of: '
                "'GAMMA' 'NORMAL' 'UNIFORM'"
            )

    @tatsumasu()
    def _es_parameter_name_(self):  # noqa
        with self._choice():
            with self._option():
                self._token('alpha')
            with self._option():
                self._token('beta')
            with self._option():
                self._token('means')
            with self._option():
                self._token('std_deviations')
            with self._option():
                self._token('lower_bounds')
            with self._option():
                self._token('upper_bounds')
            self._error(
                'expecting one of: '
                "'alpha' 'beta' 'lower_bounds' 'means'"
                "'std_deviations' 'upper_bounds'"
            )

    @tatsumasu()
    def _es_sep_(self):  # noqa
        self._comma_()
        self._cut()

        def block0():
            self._st_()
        self._closure(block0)

    @tatsumasu('ICCmd')
    def _ic_cmd_(self):  # noqa
        with self._group():
            with self._choice():
                with self._option():
                    self._token('.IC')
                with self._option():
                    self._token('.DCVOLT')
                self._error(
                    'expecting one of: '
                    "'.DCVOLT' '.IC'"
                )
        self.name_last_node('cmd')
        self._cut()
        with self._group():
            with self._choice():
                with self._option():

                    def block3():
                        self._sep_()
                        self.name_last_node('sep')
                        self._token('V')
                        self._lp_()
                        self._cut()
                        self._node_()
                        self.name_last_node('node')
                        self._rp_()

                        def block6():
                            self._st_()
                        self._closure(block6)
                        self._token('=')

                        def block7():
                            self._st_()
                        self._closure(block7)
                        self._gen_expr_()
                        self.name_last_node('value')

                        self._define(
                            ['node', 'sep', 'value'],
                            []
                        )
                    self._positive_closure(block3)
                with self._option():

                    def block9():
                        self._sep_()
                        self.name_last_node('sep')
                        self._node_()
                        self.name_last_node('node')

                        def block12():
                            self._st_()
                        self._positive_closure(block12)
                        self._gen_expr_()
                        self.name_last_node('value')

                        self._define(
                            ['node', 'sep', 'value'],
                            []
                        )
                    self._positive_closure(block9)
                self._error(
                    'expecting one of: '
                    '<sep>'
                )

        self._define(
            ['cmd', 'node', 'sep', 'value'],
            []
        )

    @tatsumasu('IncludeCmd')
    def _include_cmd_(self):  # noqa
        with self._group():
            with self._choice():
                with self._option():
                    self._token('.INCLUDE')
                with self._option():
                    self._token('.INCL')
                with self._option():
                    self._token('.INC')
                self._error(
                    'expecting one of: '
                    "'.INC' '.INCL' '.INCLUDE'"
                )
        self.name_last_node('cmd')
        self._cut()
        self._sep_()
        self.name_last_node('sep')
        with self._group():
            with self._choice():
                with self._option():
                    self._double_quote_()
                    self._cut()
                    self._filename_()
                    self.name_last_node('filename')
                    self._double_quote_()

                    self._define(
                        ['filename'],
                        []
                    )
                with self._option():
                    self._single_quote_()
                    self._cut()
                    self._filename_()
                    self.name_last_node('filename')
                    self._single_quote_()

                    self._define(
                        ['filename'],
                        []
                    )
                with self._option():
                    self._filename_()
                    self.name_last_node('filename')
                self._error(
                    'expecting one of: '
                    '<double_quote> <filename> <single_quote>'
                )

        self._define(
            ['cmd', 'filename', 'sep'],
            []
        )

    @tatsumasu('LibCmd')
    def _lib_cmd_(self):  # noqa
        self._token('.LIB')
        self.name_last_node('cmd')
        self._cut()
        self._sep_()
        self.name_last_node('sep')
        with self._group():
            with self._choice():
                with self._option():
                    self._lib_call_()
                    self.name_last_node('call')
                with self._option():
                    self._lib_block_()
                    self.name_last_node('block')
                self._error(
                    'expecting one of: '
                    '<lib_block> <lib_call>'
                )

        self._define(
            ['block', 'call', 'cmd', 'sep'],
            []
        )

    @tatsumasu('LibCall')
    def _lib_call_(self):  # noqa
        with self._group():
            with self._choice():
                with self._option():
                    self._double_quote_()
                    self._cut()
                    self._filename_()
                    self.name_last_node('filename')
                    self._double_quote_()

                    self._define(
                        ['filename'],
                        []
                    )
                with self._option():
                    self._single_quote_()
                    self._cut()
                    self._filename_()
                    self.name_last_node('filename')
                    self._single_quote_()

                    self._define(
                        ['filename'],
                        []
                    )
                with self._option():
                    self._filename_()
                    self.name_last_node('filename')
                self._error(
                    'expecting one of: '
                    '<double_quote> <filename> <single_quote>'
                )
        self._sep_()
        self.name_last_node('sep')
        self._id_()
        self.name_last_node('entry')

        self._define(
            ['entry', 'filename', 'sep'],
            []
        )

    @tatsumasu('ModelCmd')
    def _model_cmd_(self):  # noqa
        self._token('.MODEL')
        self.name_last_node('cmd')
        self._cut()
        self._sep_()
        self.name_last_node('sep')
        self._model_name_()
        self.name_last_node('name')
        self._sep_()
        self.name_last_node('sep')
        self._model_type_()
        self.name_last_node('type')
        with self._optional():
            with self._choice():
                with self._option():
                    with self._optional():
                        self._sep_()
                        self.name_last_node('sep')
                    self._lp_()
                    self._cut()
                    with self._optional():
                        self._sep_()
                        self.name_last_node('sep')
                    self._parameters_()
                    self.name_last_node('parameters')
                    with self._optional():
                        self._sep_()
                        self.name_last_node('sep')
                    self._rp_()

                    self._define(
                        ['parameters', 'sep'],
                        []
                    )
                with self._option():
                    self._sep_()
                    self.name_last_node('sep')
                    self._parameters_()
                    self.name_last_node('parameters')

                    self._define(
                        ['parameters', 'sep'],
                        []
                    )
                self._error(
                    'expecting one of: '
                    '<lp> <sep>'
                )

        self._define(
            ['cmd', 'name', 'parameters', 'sep', 'type'],
            []
        )

    @tatsumasu()
    def _model_type_(self):  # noqa
        with self._choice():
            with self._option():
                self._token('CAP')
            with self._option():
                self._token('CORE')
            with self._option():
                self._token('C')
            with self._option():
                self._token('DIG')
            with self._option():
                self._token('D')
            with self._option():
                self._token('IND')
            with self._option():
                self._token('ISWITCH')
            with self._option():
                self._token('LIN')
            with self._option():
                self._token('LTRA')
            with self._option():
                self._token('L')
            with self._option():
                self._token('NJF')
            with self._option():
                self._token('NMF')
            with self._option():
                self._token('NMOS')
            with self._option():
                self._token('NPN')
            with self._option():
                self._token('PJF')
            with self._option():
                self._token('PMF')
            with self._option():
                self._token('PMOS')
            with self._option():
                self._token('PNP')
            with self._option():
                self._token('RES')
            with self._option():
                self._token('R')
            with self._option():
                self._token('SWITCH')
            with self._option():
                self._token('TRANSLINE')
            with self._option():
                self._token('VSWITCH')
            with self._option():
                self._token('MEMRISTOR')
            with self._option():
                self._token('ZOD')
            self._error(
                'expecting one of: '
                "'C' 'CAP' 'CORE' 'D' 'DIG' 'IND'"
                "'ISWITCH' 'L' 'LIN' 'LTRA' 'MEMRISTOR'"
                "'NJF' 'NMF' 'NMOS' 'NPN' 'PJF' 'PMF'"
                "'PMOS' 'PNP' 'R' 'RES' 'SWITCH'"
                "'TRANSLINE' 'VSWITCH' 'ZOD'"
            )

    @tatsumasu('ParamCmd')
    def _param_cmd_(self):  # noqa
        self._token('.PARAM')
        self.name_last_node('cmd')
        self._cut()
        self._sep_()
        self.name_last_node('sep')
        self._parameters_()
        self.name_last_node('parameters')

        self._define(
            ['cmd', 'parameters', 'sep'],
            []
        )

    @tatsumasu('SimulatorCmd')
    def _simulator_cmd_(self):  # noqa
        self._token('.SIMULATOR')
        self.name_last_node('cmd')
        self._cut()
        self._sep_()
        self.name_last_node('sep')
        self._id_()
        self.name_last_node('simulator')

        self._define(
            ['cmd', 'sep', 'simulator'],
            []
        )

    @tatsumasu('SubcktCmd')
    def _subckt_cmd_(self):  # noqa
        self._token('.SUBCKT')
        self.name_last_node('cmd')
        self._cut()
        self._sep_()
        self.name_last_node('sep')
        self._model_name_()
        self.name_last_node('name')

        def block3():
            self._sep_()
            self.name_last_node('sep')
            with self._group():
                self._node_()
                with self._ifnot():
                    self._token(':')
            self.name_last_node('node')

            self._define(
                ['node', 'sep'],
                []
            )
        self._closure(block3)
        with self._optional():
            self._sep_()
            self.name_last_node('sep')
            self._token('params:')
            self._cut()
            with self._optional():
                self._sep_()
                self.name_last_node('sep')
            self._parameters_()
            self.name_last_node('parameters')

            self._define(
                ['parameters', 'sep'],
                []
            )
        self._cmd_net_sep_()
        self.name_last_node('sep')

        def block10():
            self._st_()
        self._closure(block10)
        self._netlist_lines_()
        self.name_last_node('lines')

        def block12():
            self._st_()
        self._closure(block12)
        self._token('.ENDS')
        self._cut()
        with self._optional():

            def block13():
                self._st_()
            self._positive_closure(block13)
            self._model_name_()
            self.name_last_node('name')

            self._define(
                ['name'],
                []
            )

        self._define(
            ['cmd', 'lines', 'name', 'node', 'parameters', 'sep'],
            []
        )

    @tatsumasu('LibBlock')
    def _lib_block_(self):  # noqa
        self._id_()
        self.name_last_node('entry')
        self._cmd_net_sep_()
        self.name_last_node('sep')
        self._cut()
        self._netlist_lines_()
        self.name_last_node('lines')

        def block3():
            self._st_()
        self._closure(block3)
        self._token('.ENDL')
        self._cut()
        with self._optional():

            def block4():
                self._st_()
            self._positive_closure(block4)
            self._id_()
            self.name_last_node('entry')

            self._define(
                ['entry'],
                []
            )

        self._define(
            ['entry', 'lines', 'sep'],
            []
        )

    @tatsumasu('TitleCmd')
    def _title_cmd_(self):  # noqa
        self._token('.TITLE')
        self.name_last_node('cmd')
        self._cut()
        self._text_()
        self.name_last_node('title')

        self._define(
            ['cmd', 'title'],
            []
        )

    @tatsumasu('Parameters')
    def _parameters_(self):  # noqa
        self._parameter_()
        self.add_last_node_to_name('@')

        def block1():
            with self._group():
                with self._choice():
                    with self._option():
                        with self._group():
                            with self._optional():
                                self._sep_()
                            self._comma_()
                            with self._optional():
                                self._sep_()
                    with self._option():
                        self._sep_()
                    self._error(
                        'expecting one of: '
                        '<comma> <sep>'
                    )
            self._parameter_()
            self.add_last_node_to_name('@')
        self._closure(block1)

    @tatsumasu('Parameter')
    def _parameter_(self):  # noqa
        self._id_()
        self.name_last_node('name')
        with self._optional():
            self._sep_()
            self.name_last_node('sep')
        self._token('=')
        self._cut()
        with self._optional():
            self._sep_()
            self.name_last_node('sep')
        self._gen_expr_()
        self.name_last_node('value')

        def block4():
            with self._optional():
                self._sep_()
                self.name_last_node('sep')
            self._comma_()
            with self._optional():
                self._sep_()
                self.name_last_node('sep')
            self._gen_expr_()
            self.name_last_node('value')

            self._define(
                ['sep', 'value'],
                []
            )
        self._closure(block4)

        self._define(
            ['name', 'sep', 'value'],
            []
        )

    @tatsumasu('GenericExpression')
    def _gen_expr_(self):  # noqa
        with self._choice():
            with self._option():
                self._braced_expression_()
                self.name_last_node('braced')
            with self._option():
                self._value_()
                self.name_last_node('value')
            self._error(
                'expecting one of: '
                '<braced_expression> <imag_value> <lc>'
                '<real_value> <value>'
            )

    @tatsumasu('TableFile')
    def _tablefile_(self):  # noqa
        self._token('tablefile')
        self.name_last_node('func')
        with self._optional():
            self._sep_()
            self.name_last_node('sep')
        self._lp_()
        self._cut()
        with self._optional():
            self._sep_()
            self.name_last_node('sep')
        with self._group():
            with self._choice():
                with self._option():
                    self._double_quote_()
                    self._cut()
                    self._filename_()
                    self.name_last_node('filename')
                    self._double_quote_()

                    self._define(
                        ['filename'],
                        []
                    )
                with self._option():
                    self._filename_()
                    self.name_last_node('filename')
                self._error(
                    'expecting one of: '
                    '<double_quote> <filename>'
                )
        with self._optional():
            self._sep_()
            self.name_last_node('sep')
        self._rp_()

        self._define(
            ['filename', 'func', 'sep'],
            []
        )

    @tatsumasu('BracedExpression')
    def _braced_expression_(self):  # noqa
        self._lc_()
        with self._optional():
            self._sep_()
            self.name_last_node('sep')
        self._expression_()
        self.name_last_node('@')
        with self._optional():
            self._sep_()
            self.name_last_node('sep')
        self._rc_()

        self._define(
            ['sep'],
            []
        )

    @tatsumasu('ParenthesisNodes')
    def _parenthesis_nodes_(self):  # noqa
        self._lp_()
        with self._optional():
            self._sep_()
            self.name_last_node('sep')
        self._circuit_nodes_()
        self.name_last_node('@')
        with self._optional():
            self._sep_()
            self.name_last_node('sep')
        self._rp_()

        self._define(
            ['sep'],
            []
        )

    @tatsumasu('CircuitNodes')
    def _circuit_nodes_(self):  # noqa
        self._node_()
        self.add_last_node_to_name('@')
        with self._group():
            with self._choice():
                with self._option():
                    self._sep_()
                    self.name_last_node('sep')
                with self._option():
                    with self._group():
                        with self._optional():
                            self._sep_()
                            self.name_last_node('sep')
                        self._comma_()
                        with self._optional():
                            self._sep_()
                            self.name_last_node('sep')

                        self._define(
                            ['sep'],
                            []
                        )
                self._error(
                    'expecting one of: '
                    '<comma> <sep>'
                )
        self._node_()
        self.add_last_node_to_name('@')

        self._define(
            ['sep'],
            []
        )

    @tatsumasu('Expression')
    @leftrec
    def _expression_(self):  # noqa
        with self._choice():
            with self._option():
                self._ternary_()
                self.name_last_node('ternary')
            with self._option():
                self._term_()
                self.name_last_node('term')
            self._error(
                'expecting one of: '
                '<add_sub> <conditional_expression>'
                '<term> <ternary>'
            )

    @tatsumasu('Ternary')
    @nomemo
    def _ternary_(self):  # noqa
        self._conditional_expression_()
        self.name_last_node('t')
        with self._optional():
            self._sep_()
            self.name_last_node('sep')
        self._token('?')
        self.name_last_node('op')
        self._cut()
        with self._optional():
            self._sep_()
            self.name_last_node('sep')
        self._expression_()
        self.name_last_node('x')
        with self._optional():
            self._sep_()
            self.name_last_node('sep')
        self._token(':')
        self._cut()
        with self._optional():
            self._sep_()
            self.name_last_node('sep')
        self._expression_()
        self.name_last_node('y')

        self._define(
            ['op', 'sep', 't', 'x', 'y'],
            []
        )

    @tatsumasu('Conditional')
    @nomemo
    def _conditional_expression_(self):  # noqa
        self._boolean_or_()
        self.name_last_node('expr')

    @tatsumasu('Or')
    @nomemo
    def _boolean_or_(self):  # noqa
        self._boolean_xor_()
        self.name_last_node('left')
        with self._optional():
            with self._optional():
                self._sep_()
                self.name_last_node('sep')
            self._token('|')
            self.name_last_node('op')
            with self._optional():
                self._sep_()
                self.name_last_node('sep')
            self._boolean_or_()
            self.name_last_node('right')

            self._define(
                ['op', 'right', 'sep'],
                []
            )

        self._define(
            ['left', 'op', 'right', 'sep'],
            []
        )

    @tatsumasu('Xor')
    @nomemo
    def _boolean_xor_(self):  # noqa
        self._boolean_and_()
        self.name_last_node('left')
        with self._optional():
            with self._optional():
                self._sep_()
                self.name_last_node('sep')
            self._token('^')
            self.name_last_node('op')
            with self._optional():
                self._sep_()
                self.name_last_node('sep')
            self._boolean_xor_()
            self.name_last_node('right')

            self._define(
                ['op', 'right', 'sep'],
                []
            )

        self._define(
            ['left', 'op', 'right', 'sep'],
            []
        )

    @tatsumasu('And')
    @nomemo
    def _boolean_and_(self):  # noqa
        self._boolean_not_()
        self.name_last_node('left')
        with self._optional():
            with self._optional():
                self._sep_()
                self.name_last_node('sep')
            self._token('&')
            self.name_last_node('op')
            with self._optional():
                self._sep_()
                self.name_last_node('sep')
            self._boolean_and_()
            self.name_last_node('right')

            self._define(
                ['op', 'right', 'sep'],
                []
            )

        self._define(
            ['left', 'op', 'right', 'sep'],
            []
        )

    @tatsumasu('Not')
    @nomemo
    def _boolean_not_(self):  # noqa
        with self._optional():
            self._token('~')
            self.name_last_node('op')
        self._relational_()
        self.name_last_node('operator')

        self._define(
            ['op', 'operator'],
            []
        )

    @tatsumasu('Relational')
    @nomemo
    def _relational_(self):  # noqa
        with self._choice():
            with self._option():
                self._expression_()
                self.name_last_node('left')
                with self._optional():
                    self._sep_()
                    self.name_last_node('sep')
                with self._group():
                    with self._choice():
                        with self._option():
                            self._token('==')
                        with self._option():
                            self._token('!=')
                        with self._option():
                            self._token('>=')
                        with self._option():
                            self._token('<=')
                        with self._option():
                            self._token('>')
                        with self._option():
                            self._token('<')
                        self._error(
                            'expecting one of: '
                            "'!=' '<' '<=' '==' '>' '>='"
                        )
                self.name_last_node('op')
                with self._optional():
                    self._sep_()
                    self.name_last_node('sep')
                self._expression_()
                self.name_last_node('right')

                self._define(
                    ['left', 'op', 'right', 'sep'],
                    []
                )
            with self._option():
                self._conditional_factor_()
                self.name_last_node('factor')
            self._error(
                'expecting one of: '
                '<add_sub> <boolean>'
                '<conditional_expression>'
                '<conditional_factor> <expression> <lp>'
                '<term> <ternary>'
            )

    @tatsumasu('ConditionalFactor')
    def _conditional_factor_(self):  # noqa
        with self._choice():
            with self._option():
                self._lp_()
                with self._optional():
                    self._sep_()
                    self.name_last_node('sep')
                self._conditional_expression_()
                self.name_last_node('expr')
                with self._optional():
                    self._sep_()
                    self.name_last_node('sep')
                self._rp_()

                self._define(
                    ['expr', 'sep'],
                    []
                )
            with self._option():
                self._boolean_()
                self.name_last_node('boolean')
            self._error(
                'expecting one of: '
                "'(' 'FALSE' 'TRUE' <boolean> <lp>"
            )

    @tatsumasu('Term')
    def _term_(self):  # noqa
        self._add_sub_()
        self.name_last_node('@')

    @tatsumasu('AddSub')
    def _add_sub_(self):  # noqa
        self._prod_()
        self.name_last_node('left')
        with self._optional():
            with self._optional():
                self._sep_()
                self.name_last_node('sep')
            with self._group():
                with self._choice():
                    with self._option():
                        self._token('+')
                    with self._option():
                        self._token('-')
                    self._error(
                        'expecting one of: '
                        "'+' '-'"
                    )
            self.name_last_node('op')
            with self._optional():
                self._sep_()
                self.name_last_node('sep')
            self._add_sub_()
            self.name_last_node('right')

            self._define(
                ['op', 'right', 'sep'],
                []
            )

        self._define(
            ['left', 'op', 'right', 'sep'],
            []
        )

    @tatsumasu('ProdDivMod')
    def _prod_(self):  # noqa
        self._unary_()
        self.name_last_node('left')
        with self._optional():
            with self._optional():
                self._sep_()
                self.name_last_node('sep')
            with self._group():
                with self._choice():
                    with self._option():
                        self._token('*')
                    with self._option():
                        self._token('/')
                    with self._option():
                        self._token('%')
                    self._error(
                        'expecting one of: '
                        "'%' '*' '/'"
                    )
            self.name_last_node('op')
            with self._optional():
                self._sep_()
                self.name_last_node('sep')
            self._prod_()
            self.name_last_node('right')

            self._define(
                ['op', 'right', 'sep'],
                []
            )

        self._define(
            ['left', 'op', 'right', 'sep'],
            []
        )

    @tatsumasu('Sign')
    def _unary_(self):  # noqa
        with self._optional():
            with self._group():
                with self._choice():
                    with self._option():
                        self._token('+')
                    with self._option():
                        self._token('-')
                    self._error(
                        'expecting one of: '
                        "'+' '-'"
                    )
            self.name_last_node('op')
        self._exp_()
        self.name_last_node('operator')

        self._define(
            ['op', 'operator'],
            []
        )

    @tatsumasu('Exponential')
    def _exp_(self):  # noqa
        self._functional_()
        self.name_last_node('left')
        with self._optional():
            with self._optional():
                self._sep_()
                self.name_last_node('sep')
            self._token('**')
            self.name_last_node('op')
            with self._optional():
                self._sep_()
                self.name_last_node('sep')
            self._exp_()
            self.name_last_node('right')

            self._define(
                ['op', 'right', 'sep'],
                []
            )

        self._define(
            ['left', 'op', 'right', 'sep'],
            []
        )

    @tatsumasu('Functional')
    def _functional_(self):  # noqa
        with self._choice():
            with self._option():
                self._functions_()
                self.name_last_node('@')
            with self._option():
                self._variable_()
                self.name_last_node('@')
            self._error(
                'expecting one of: '
                '<atan2> <ddx> <factor> <functions>'
                '<functions_1> <functions_2> <gauss>'
                '<i_func> <if_func> <lc> <limit> <rand>'
                '<unif> <v_func> <var_id> <variable>'
            )

    @tatsumasu('Variable')
    def _variable_(self):  # noqa
        with self._choice():
            with self._option():
                self._lc_()
                with self._optional():
                    self._sep_()
                    self.name_last_node('sep')
                self._var_id_()
                self.name_last_node('variable')
                with self._optional():
                    self._sep_()
                    self.name_last_node('sep')
                self._rc_()

                self._define(
                    ['sep', 'variable'],
                    []
                )
            with self._option():
                self._var_id_()
                self.name_last_node('variable')
            with self._option():
                self._factor_()
                self.name_last_node('factor')
            self._error(
                'expecting one of: '
                "'{' <factor> <lc> <lp> <value> <var_id>"
                '[a-zA-Z] [a-zA-Z_`@#\\$][a-zA-Z0-'
                '9_:`@#\\.\\$]*[a-zA-Z0-9_`@#\\.\\$]'
            )

    @tatsumasu('Factor')
    def _factor_(self):  # noqa
        with self._choice():
            with self._option():
                self._lp_()
                with self._optional():
                    self._sep_()
                    self.name_last_node('sep')
                self._expression_()
                self.name_last_node('@')
                with self._optional():
                    self._sep_()
                    self.name_last_node('sep')
                self._rp_()

                self._define(
                    ['sep'],
                    []
                )
            with self._option():
                self._value_()
                self.name_last_node('@')
            self._error(
                'expecting one of: '
                "'(' <imag_value> <lp> <real_value>"
                '<value>'
            )

    @tatsumasu('Functions')
    def _functions_(self):  # noqa
        with self._choice():
            with self._option():
                self._functions_1_()
            with self._option():
                self._atan2_()
            with self._option():
                self._ddx_()
            with self._option():
                self._gauss_()
            with self._option():
                self._if_func_()
            with self._option():
                self._limit_()
            with self._option():
                self._functions_2_()
            with self._option():
                self._rand_()
            with self._option():
                self._unif_()
            with self._option():
                self._i_func_()
            with self._option():
                self._v_func_()
            self._error(
                'expecting one of: '
                "'Img' 'Ph' 'R' 'Re' 'abs' 'acos' 'acosh'"
                "'agauss' 'arctan' 'asin' 'asinh' 'atan'"
                "'atan2' 'atanh' 'aunif' 'ceil' 'cos'"
                "'cosh' 'ddt' 'ddx' 'exp' 'floor' 'gauss'"
                "'i' 'if' 'int' 'limit' 'ln' 'log'"
                "'log10' 'm' 'max' 'min' 'nint' 'pow'"
                "'pwr' 'pwrs' 'rand' 'sdt' 'sgn' 'sign'"
                "'sin' 'sinh' 'sqrt' 'stp' 'tan' 'tanh'"
                "'unif' 'uramp' 'v' <functions_1>"
                '<functions_2> <i_func> <if_func>'
                '<v_func>'
            )

    @tatsumasu()
    def _functions_1_(self):  # noqa
        with self._group():
            with self._choice():
                with self._option():
                    self._token('abs')
                with self._option():
                    self._token('ceil')
                with self._option():
                    self._token('ddt')
                with self._option():
                    self._token('floor')
                with self._option():
                    self._token('int')
                with self._option():
                    self._token('m')
                with self._option():
                    self._token('nint')
                with self._option():
                    self._token('sdt')
                with self._option():
                    self._token('sgn')
                with self._option():
                    self._token('stp')
                with self._option():
                    self._token('sqrt')
                with self._option():
                    self._token('uramp')
                with self._option():
                    self._token('Ph')
                with self._option():
                    self._token('Re')
                with self._option():
                    self._token('R')
                with self._option():
                    self._token('Img')
                with self._option():
                    self._token('acosh')
                with self._option():
                    self._token('acos')
                with self._option():
                    self._token('asinh')
                with self._option():
                    self._token('asin')
                with self._option():
                    self._token('arctan')
                with self._option():
                    self._token('atanh')
                with self._option():
                    self._token('atan')
                with self._option():
                    self._token('cosh')
                with self._option():
                    self._token('cos')
                with self._option():
                    self._token('exp')
                with self._option():
                    self._token('ln')
                with self._option():
                    self._token('log')
                with self._option():
                    self._token('log10')
                with self._option():
                    self._token('sinh')
                with self._option():
                    self._token('sin')
                with self._option():
                    self._token('tanh')
                with self._option():
                    self._token('tan')
                self._error(
                    'expecting one of: '
                    "'Img' 'Ph' 'R' 'Re' 'abs' 'acos' 'acosh'"
                    "'arctan' 'asin' 'asinh' 'atan' 'atanh'"
                    "'ceil' 'cos' 'cosh' 'ddt' 'exp' 'floor'"
                    "'int' 'ln' 'log' 'log10' 'm' 'nint'"
                    "'sdt' 'sgn' 'sin' 'sinh' 'sqrt' 'stp'"
                    "'tan' 'tanh' 'uramp'"
                )
        self.name_last_node('func')
        with self._optional():
            self._sep_()
            self.name_last_node('sep')
        self._lp_()
        self._cut()
        with self._optional():
            self._sep_()
            self.name_last_node('sep')
        self._expression_()
        self.name_last_node('x')
        with self._optional():
            self._sep_()
            self.name_last_node('sep')
        self._rp_()

        self._define(
            ['func', 'sep', 'x'],
            []
        )

    @tatsumasu()
    def _atan2_(self):  # noqa
        self._token('atan2')
        self.name_last_node('func')
        with self._optional():
            self._sep_()
            self.name_last_node('sep')
        self._lp_()
        self._cut()
        with self._optional():
            self._sep_()
            self.name_last_node('sep')
        self._expression_()
        self.name_last_node('y')
        with self._optional():
            self._sep_()
            self.name_last_node('sep')
        self._comma_()
        with self._optional():
            self._sep_()
            self.name_last_node('sep')
        self._expression_()
        self.name_last_node('x')
        with self._optional():
            self._sep_()
            self.name_last_node('sep')
        self._rp_()

        self._define(
            ['func', 'sep', 'x', 'y'],
            []
        )

    @tatsumasu()
    def _ddx_(self):  # noqa
        self._token('ddx')
        self.name_last_node('func')
        with self._optional():
            self._sep_()
            self.name_last_node('sep')
        self._lp_()
        self._cut()
        with self._optional():
            self._sep_()
            self.name_last_node('sep')
        self._id_()
        self.name_last_node('f')
        with self._optional():
            self._sep_()
            self.name_last_node('sep')
        self._comma_()
        with self._optional():
            self._sep_()
            self.name_last_node('sep')
        self._expression_()
        self.name_last_node('x')
        with self._optional():
            self._sep_()
            self.name_last_node('sep')
        self._rp_()

        self._define(
            ['f', 'func', 'sep', 'x'],
            []
        )

    @tatsumasu()
    def _gauss_(self):  # noqa
        with self._group():
            with self._choice():
                with self._option():
                    self._token('agauss')
                with self._option():
                    self._token('gauss')
                self._error(
                    'expecting one of: '
                    "'agauss' 'gauss'"
                )
        self.name_last_node('func')
        with self._optional():
            self._sep_()
            self.name_last_node('sep')
        self._lp_()
        self._cut()
        with self._optional():
            self._sep_()
            self.name_last_node('sep')
        self._expression_()
        self.name_last_node('mu')
        with self._optional():
            self._sep_()
            self.name_last_node('sep')
        self._comma_()
        with self._optional():
            self._sep_()
            self.name_last_node('sep')
        self._expression_()
        self.name_last_node('alpha')
        with self._optional():
            self._sep_()
            self.name_last_node('sep')
        self._comma_()
        with self._optional():
            self._sep_()
            self.name_last_node('sep')
        self._expression_()
        self.name_last_node('n')
        with self._optional():
            self._sep_()
            self.name_last_node('sep')
        self._rp_()

        self._define(
            ['alpha', 'func', 'mu', 'n', 'sep'],
            []
        )

    @tatsumasu()
    def _i_func_(self):  # noqa
        self._token('i')
        self.name_last_node('func')
        with self._optional():
            self._sep_()
            self.name_last_node('sep')
        self._lp_()
        self._cut()
        with self._optional():
            self._sep_()
            self.name_last_node('sep')
        with self._if():
            self._token('V')
        self._dev_()
        self.name_last_node('device')
        with self._optional():
            self._sep_()
            self.name_last_node('sep')
        self._rp_()

        self._define(
            ['device', 'func', 'sep'],
            []
        )

    @tatsumasu()
    def _if_func_(self):  # noqa
        self._token('if')
        self.name_last_node('func')
        with self._optional():
            self._sep_()
            self.name_last_node('sep')
        self._lp_()
        self._cut()
        with self._optional():
            self._sep_()
            self.name_last_node('sep')
        self._conditional_expression_()
        self.name_last_node('t')
        with self._optional():
            self._sep_()
            self.name_last_node('sep')
        self._comma_()
        with self._optional():
            self._sep_()
            self.name_last_node('sep')
        self._expression_()
        self.name_last_node('x')
        with self._optional():
            self._sep_()
            self.name_last_node('sep')
        self._comma_()
        with self._optional():
            self._sep_()
            self.name_last_node('sep')
        self._expression_()
        self.name_last_node('y')
        with self._optional():
            self._sep_()
            self.name_last_node('sep')
        self._rp_()

        self._define(
            ['func', 'sep', 't', 'x', 'y'],
            []
        )

    @tatsumasu()
    def _limit_(self):  # noqa
        self._token('limit')
        self.name_last_node('func')
        with self._optional():
            self._sep_()
            self.name_last_node('sep')
        self._lp_()
        self._cut()
        with self._optional():
            self._sep_()
            self.name_last_node('sep')
        self._expression_()
        self.name_last_node('x')
        with self._optional():
            self._sep_()
            self.name_last_node('sep')
        self._comma_()
        with self._optional():
            self._sep_()
            self.name_last_node('sep')
        self._expression_()
        self.name_last_node('y')
        with self._optional():
            self._sep_()
            self.name_last_node('sep')
        self._comma_()
        with self._optional():
            self._sep_()
            self.name_last_node('sep')
        self._expression_()
        self.name_last_node('z')
        with self._optional():
            self._sep_()
            self.name_last_node('sep')
        self._rp_()

        self._define(
            ['func', 'sep', 'x', 'y', 'z'],
            []
        )

    @tatsumasu()
    def _functions_2_(self):  # noqa
        with self._group():
            with self._choice():
                with self._option():
                    self._token('min')
                with self._option():
                    self._token('max')
                with self._option():
                    self._token('pwrs')
                with self._option():
                    self._token('pow')
                with self._option():
                    self._token('pwr')
                with self._option():
                    self._token('sign')
                self._error(
                    'expecting one of: '
                    "'max' 'min' 'pow' 'pwr' 'pwrs' 'sign'"
                )
        self.name_last_node('func')
        with self._optional():
            self._sep_()
            self.name_last_node('sep')
        self._lp_()
        self._cut()
        with self._optional():
            self._sep_()
            self.name_last_node('sep')
        self._expression_()
        self.name_last_node('x')
        with self._optional():
            self._sep_()
            self.name_last_node('sep')
        self._comma_()
        with self._optional():
            self._sep_()
            self.name_last_node('sep')
        self._expression_()
        self.name_last_node('y')
        with self._optional():
            self._sep_()
            self.name_last_node('sep')
        self._rp_()

        self._define(
            ['func', 'sep', 'x', 'y'],
            []
        )

    @tatsumasu()
    def _rand_(self):  # noqa
        self._token('rand')
        self.name_last_node('func')
        with self._optional():
            self._sep_()
            self.name_last_node('sep')
        self._lp_()
        self._cut()
        with self._optional():
            self._sep_()
            self.name_last_node('sep')
        self._rp_()

        self._define(
            ['func', 'sep'],
            []
        )

    @tatsumasu()
    def _unif_(self):  # noqa
        with self._group():
            with self._choice():
                with self._option():
                    self._token('aunif')
                with self._option():
                    self._token('unif')
                self._error(
                    'expecting one of: '
                    "'aunif' 'unif'"
                )
        self.name_last_node('func')
        with self._optional():
            self._sep_()
            self.name_last_node('sep')
        self._lp_()
        self._cut()
        with self._optional():
            self._sep_()
            self.name_last_node('sep')
        self._expression_()
        self.name_last_node('mu')
        with self._optional():
            self._sep_()
            self.name_last_node('sep')
        self._comma_()
        with self._optional():
            self._sep_()
            self.name_last_node('sep')
        self._expression_()
        self.name_last_node('alpha')
        with self._optional():
            self._sep_()
            self.name_last_node('sep')
        self._rp_()

        self._define(
            ['alpha', 'func', 'mu', 'sep'],
            []
        )

    @tatsumasu()
    def _v_func_(self):  # noqa
        self._token('v')
        self.name_last_node('func')
        with self._optional():
            self._sep_()
            self.name_last_node('sep')
        self._lp_()
        self._cut()
        with self._optional():
            self._sep_()
            self.name_last_node('sep')
        self._node_()
        self.name_last_node('node')
        with self._optional():
            self._sep_()
            self.name_last_node('sep')
        with self._optional():
            self._comma_()
            with self._optional():
                self._sep_()
                self.name_last_node('sep')
            self._node_()
            self.name_last_node('node')
            with self._optional():
                self._sep_()
                self.name_last_node('sep')

            self._define(
                ['node', 'sep'],
                []
            )
        self._rp_()

        self._define(
            ['func', 'node', 'sep'],
            []
        )

    @tatsumasu()
    def _special_variables_(self):  # noqa
        with self._choice():
            with self._option():
                self._token('time')
            with self._option():
                self._token('temper')
            with self._option():
                self._token('temp')
            with self._option():
                self._token('freq')
            with self._option():
                self._token('vt')
            with self._option():
                self._token('pi')
            self._error(
                'expecting one of: '
                "'freq' 'pi' 'temp' 'temper' 'time' 'vt'"
            )

    @tatsumasu('Value')
    def _value_(self):  # noqa
        with self._group():
            with self._choice():
                with self._option():
                    with self._group():
                        self._real_value_()
                        self.name_last_node('real')
                        self._token('+')
                        self._imag_value_()
                        self.name_last_node('imag')

                        self._define(
                            ['imag', 'real'],
                            []
                        )
                with self._option():
                    self._imag_value_()
                    self.name_last_node('imag')
                with self._option():
                    self._real_value_()
                    self.name_last_node('real')
                self._error(
                    'expecting one of: '
                    '<imag_value> <real_value>'
                )
        with self._optional():
            with self._choice():
                with self._option():
                    self._hz_()
                with self._option():
                    self._unit_()
                self._error(
                    'expecting one of: '
                    '<hz> <unit>'
                )
        self.name_last_node('unit')

        self._define(
            ['imag', 'real', 'unit'],
            []
        )

    @tatsumasu('ImagValue')
    def _imag_value_(self):  # noqa
        self._number_scale_()
        self.name_last_node('value')
        self._token('J')

        self._define(
            ['value'],
            []
        )

    @tatsumasu('RealValue')
    def _real_value_(self):  # noqa
        self._number_scale_()
        self.name_last_node('value')

    @tatsumasu()
    def _freq_value_(self):  # noqa
        self._number_scale_()
        self.name_last_node('value')
        with self._optional():
            self._hz_()
        self.name_last_node('unit')

        self._define(
            ['unit', 'value'],
            []
        )

    @tatsumasu('NumberScale')
    def _number_scale_(self):  # noqa
        with self._choice():
            with self._option():
                self._floating_point_()
                self.name_last_node('value')
                with self._group():
                    with self._choice():
                        with self._option():
                            self._meg_()
                        with self._option():
                            with self._optional():
                                self._suffix_()
                        self._error(
                            'expecting one of: '
                            '<meg> <suffix>'
                        )
                self.name_last_node('scale')

                self._define(
                    ['scale', 'value'],
                    []
                )
            with self._option():
                self._integer_()
                self.name_last_node('value')
                with self._group():
                    with self._choice():
                        with self._option():
                            self._meg_()
                        with self._option():
                            with self._optional():
                                self._suffix_()
                        self._error(
                            'expecting one of: '
                            '<meg> <suffix>'
                        )
                self.name_last_node('scale')

                self._define(
                    ['scale', 'value'],
                    []
                )
            self._error(
                'expecting one of: '
                '([\\+\\-]?(([0-9]+(\\.[0-9]*)?)|(\\.[0-'
                '9]+))([eE][\\-\\+]?[0-9]{1,3})?)'
                '([\\+\\-]?[0-9]+) <floating_point>'
                '<integer>'
            )

    @tatsumasu()
    def _suffix_(self):  # noqa
        self._pattern('[tTgGkKmMxXuUnNpPfFµ]')

    @tatsumasu()
    def _meg_(self):  # noqa
        self._pattern('[mM][eE][gG]')

    @tatsumasu('Unit')
    def _unit_(self):  # noqa
        self._pattern('[a-zA-Z%]+')

    @tatsumasu('Hz')
    def _hz_(self):  # noqa
        self._pattern('[Hh][Zz]')

    @tatsumasu()
    def _lead_name_(self):  # noqa
        self._pattern('I[SDGBEC1-9]')

    @tatsumasu('Float')
    def _floating_point_(self):  # noqa
        self._pattern('([\\+\\-]?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))([eE][\\-\\+]?[0-9]{1,3})?)')

    @tatsumasu('Int')
    def _integer_(self):  # noqa
        self._pattern('([\\+\\-]?[0-9]+)')

    @tatsumasu()
    def _digit_(self):  # noqa
        self._pattern('[0-9]')

    @tatsumasu('Filename')
    def _filename_(self):  # noqa
        self._pattern('[a-zA-Z0-9_:@#\\.\\$\\/][a-zA-Z0-9_:@#\\.\\$\\/\\+\\-]*')

    @tatsumasu()
    def _boolean_(self):  # noqa
        with self._choice():
            with self._option():
                self._token('TRUE')
            with self._option():
                self._token('FALSE')
            self._error(
                'expecting one of: '
                "'FALSE' 'TRUE'"
            )

    @tatsumasu('ModelName')
    def _model_name_(self):  # noqa
        self._pattern('[a-zA-Z0-9_][a-zA-Z0-9_\\-\\+\\.]*')
        self.name_last_node('name')
        with self._ifnot():
            with self._group():
                with self._optional():
                    self._sep_()
                    self.name_last_node('sep')
                self._token('=')

                self._define(
                    ['sep'],
                    []
                )

        self._define(
            ['name', 'sep'],
            []
        )

    @tatsumasu('BinaryPattern')
    def _binary_pattern_(self):  # noqa
        self._pattern('[Bb]')

        def block1():
            self._binary_()
        self._positive_closure(block1)
        self.name_last_node('pattern')

        self._define(
            ['pattern'],
            []
        )

    @tatsumasu()
    def _binary_(self):  # noqa
        self._pattern('[01]')

    @tatsumasu('Device')
    def _dev_(self):  # noqa
        self._pattern('[a-zA-Z\\$][a-zA-Z0-9_:!`@#\\.\\+\\-\\$]*')

    @tatsumasu('NetNode')
    def _node_(self):  # noqa
        with self._group():
            with self._choice():
                with self._option():
                    self._pattern('[a-zA-Z0-9_\\[\\$\\/\\+\\-][a-zA-Z0-9_:\\$\\-`~!@#%&_\\+|<>\\?\\.\\\\|\\^\\*\\/]*[a-zA-Z0-9_\\$\\-`~!@#%&_\\+|<>\\?\\.\\\\|\\^\\*\\]\\/]')
                with self._option():
                    self._pattern('[a-zA-Z0-9_]')
                self._error(
                    'expecting one of: '
                    '[a-zA-Z0-9_\\[\\$\\/\\+\\-][a-zA-Z0-9_:\\$\\-'
                    '`~!@#%&_\\+|<>\\?\\.\\|\\^\\*\\/]*[a-zA-Z0-'
                    '9_\\$\\-`~!@#%&_\\+|<>\\?\\.\\|\\^\\*\\]\\/]'
                    '[a-zA-Z0-9_]'
                )
        self.name_last_node('node')
        with self._ifnot():
            with self._group():
                with self._optional():
                    self._sep_()
                    self.name_last_node('sep')
                self._token('=')

                self._define(
                    ['sep'],
                    []
                )

        self._define(
            ['node', 'sep'],
            []
        )

    @tatsumasu()
    def _id_(self):  # noqa
        with self._choice():
            with self._option():
                self._pattern('[a-zA-Z_`@#\\$][a-zA-Z0-9_:`@#\\.\\$\\/]*[a-zA-Z0-9_`@#\\.\\$]')
            with self._option():
                self._pattern('[a-zA-Z_`@#\\$]')
            self._error(
                'expecting one of: '
                '[a-zA-Z_`@#\\$] [a-zA-Z_`@#\\$][a-zA-Z0-'
                '9_:`@#\\.\\$\\/]*[a-zA-Z0-9_`@#\\.\\$]'
            )

    @tatsumasu()
    def _var_id_(self):  # noqa
        with self._choice():
            with self._option():
                self._pattern('[a-zA-Z_`@#\\$][a-zA-Z0-9_:`@#\\.\\$]*[a-zA-Z0-9_`@#\\.\\$]')
            with self._option():
                self._pattern('[a-zA-Z]')
            self._error(
                'expecting one of: '
                '[a-zA-Z] [a-zA-Z_`@#\\$][a-zA-Z0-'
                '9_:`@#\\.\\$]*[a-zA-Z0-9_`@#\\.\\$]'
            )

    @tatsumasu()
    def _end_sep_(self):  # noqa
        with self._choice():
            with self._option():
                self._cmd_net_sep_()
                self.name_last_node('@')

                def block2():
                    self._st_()
                self._closure(block2)
            with self._option():

                def block3():
                    self._st_()
                self._positive_closure(block3)
            self._error(
                'expecting one of: '
                '<cmd_net_sep> <inline_comment> <newline>'
                '<st> [ \\t]'
            )

    @tatsumasu()
    def _sep_(self):  # noqa
        with self._choice():
            with self._option():

                def block1():
                    self._cmd_net_sep_()
                    self.name_last_node('@')

                    def block3():
                        self._st_()
                    self._closure(block3)
                    self._token('+')

                    def block4():
                        self._st_()
                    self._closure(block4)
                self._positive_closure(block1)
            with self._option():

                def block5():
                    self._st_()
                self._positive_closure(block5)
            self._error(
                'expecting one of: '
                '<cmd_net_sep> <inline_comment> <newline>'
                '<st> [ \\t]'
            )

    @tatsumasu('Separator')
    def _cmd_net_sep_(self):  # noqa

        def block0():
            self._st_()
        self._closure(block0)
        with self._optional():
            self._inline_comment_()
            self.name_last_node('@')
        self.name_last_node('comment')
        self._newline_()

        def block3():

            def block4():
                self._st_()
            self._closure(block4)
            with self._optional():
                with self._choice():
                    with self._option():
                        self._line_comment_()
                        self.name_last_node('@')
                    with self._option():
                        self._inline_comment_()
                        self.name_last_node('@')
                    self._error(
                        'expecting one of: '
                        '<inline_comment> <line_comment>'
                    )
            self.name_last_node('comment')
            self._newline_()

            self._define(
                ['comment'],
                []
            )
        self._closure(block3)

        self._define(
            ['comment'],
            []
        )

    @tatsumasu()
    def _inline_comment_(self):  # noqa
        self._semicolon_()

        def block0():
            self._st_()
        self._closure(block0)
        self._text_()
        self.name_last_node('@')

    @tatsumasu()
    def _line_comment_(self):  # noqa
        self._asterisk_()

        def block0():
            self._st_()
        self._closure(block0)
        self._text_()
        self.name_last_node('@')

    @tatsumasu('Comment')
    def _text_(self):  # noqa
        self._pattern('[^\\r\\n]*')

    @tatsumasu()
    def _asterisk_(self):  # noqa
        self._token('*')

    @tatsumasu()
    def _question_mark_(self):  # noqa
        self._token('?')

    @tatsumasu()
    def _colon_(self):  # noqa
        self._token(':')

    @tatsumasu()
    def _semicolon_(self):  # noqa
        self._token(';')

    @tatsumasu()
    def _comma_(self):  # noqa
        self._token(',')

    @tatsumasu()
    def _dot_(self):  # noqa
        self._token('.')

    @tatsumasu()
    def _dollar_(self):  # noqa
        self._token('\\$')

    @tatsumasu()
    def _double_bar_(self):  # noqa
        self._token('//')

    @tatsumasu()
    def _single_quote_(self):  # noqa
        self._token("'")

    @tatsumasu()
    def _double_quote_(self):  # noqa
        self._token('"')

    @tatsumasu()
    def _lc_(self):  # noqa
        self._token('{')

    @tatsumasu()
    def _rc_(self):  # noqa
        self._token('}')

    @tatsumasu()
    def _lp_(self):  # noqa
        self._token('(')

    @tatsumasu()
    def _rp_(self):  # noqa
        self._token(')')

    @tatsumasu()
    def _newline_(self):  # noqa
        self._pattern('[\\r\\n]')

    @tatsumasu()
    def _st_(self):  # noqa
        self._pattern('[ \\t]')

    @tatsumasu()
    def _ws_(self):  # noqa
        self._pattern('[^\\S\\r\\n]*')


class SpiceSemantics:
    def start(self, ast):  # noqa
        return ast

    def lines(self, ast):  # noqa
        return ast

    def circuit_line(self, ast):  # noqa
        return ast

    def netlist_lines(self, ast):  # noqa
        return ast

    def netlist_line(self, ast):  # noqa
        return ast

    def encrypted(self, ast):  # noqa
        return ast

    def device(self, ast):  # noqa
        return ast

    def nonlinear_dependent_source(self, ast):  # noqa
        return ast

    def abm_expression(self, ast):  # noqa
        return ast

    def capacitor(self, ast):  # noqa
        return ast

    def diode(self, ast):  # noqa
        return ast

    def voltage_controlled_voltage_source(self, ast):  # noqa
        return ast

    def current_controlled_current_source(self, ast):  # noqa
        return ast

    def voltage_controlled_current_source(self, ast):  # noqa
        return ast

    def current_controlled_voltage_source(self, ast):  # noqa
        return ast

    def control_value(self, ast):  # noqa
        return ast

    def control_table(self, ast):  # noqa
        return ast

    def control_voltage_poly(self, ast):  # noqa
        return ast

    def control_current_poly(self, ast):  # noqa
        return ast

    def current_source(self, ast):  # noqa
        return ast

    def jfet(self, ast):  # noqa
        return ast

    def mutual_inductor(self, ast):  # noqa
        return ast

    def inductor(self, ast):  # noqa
        return ast

    def mosfet(self, ast):  # noqa
        return ast

    def bjt(self, ast):  # noqa
        return ast

    def substrate_node(self, ast):  # noqa
        return ast

    def resistor(self, ast):  # noqa
        return ast

    def switch(self, ast):  # noqa
        return ast

    def subcircuit(self, ast):  # noqa
        return ast

    def voltage_source(self, ast):  # noqa
        return ast

    def dc(self, ast):  # noqa
        return ast

    def ac(self, ast):  # noqa
        return ast

    def transient_specification(self, ast):  # noqa
        return ast

    def transient_pulse(self, ast):  # noqa
        return ast

    def pulse_arguments(self, ast):  # noqa
        return ast

    def transient_sin(self, ast):  # noqa
        return ast

    def sin_arguments(self, ast):  # noqa
        return ast

    def transient_exp(self, ast):  # noqa
        return ast

    def exp_arguments(self, ast):  # noqa
        return ast

    def transient_pat(self, ast):  # noqa
        return ast

    def pat_arguments(self, ast):  # noqa
        return ast

    def transient_pwl(self, ast):  # noqa
        return ast

    def pwl_file_arguments(self, ast):  # noqa
        return ast

    def pwl_arguments(self, ast):  # noqa
        return ast

    def transient_sffm(self, ast):  # noqa
        return ast

    def sffm_arguments(self, ast):  # noqa
        return ast

    def command(self, ast):  # noqa
        return ast

    def netlist_cmds(self, ast):  # noqa
        return ast

    def ac_cmd(self, ast):  # noqa
        return ast

    def ac_sweep_type(self, ast):  # noqa
        return ast

    def data_cmd(self, ast):  # noqa
        return ast

    def dc_cmd(self, ast):  # noqa
        return ast

    def embedded_sampling_cmd(self, ast):  # noqa
        return ast

    def es_parameter_type(self, ast):  # noqa
        return ast

    def es_parameter_name(self, ast):  # noqa
        return ast

    def es_sep(self, ast):  # noqa
        return ast

    def ic_cmd(self, ast):  # noqa
        return ast

    def include_cmd(self, ast):  # noqa
        return ast

    def lib_cmd(self, ast):  # noqa
        return ast

    def lib_call(self, ast):  # noqa
        return ast

    def model_cmd(self, ast):  # noqa
        return ast

    def model_type(self, ast):  # noqa
        return ast

    def param_cmd(self, ast):  # noqa
        return ast

    def simulator_cmd(self, ast):  # noqa
        return ast

    def subckt_cmd(self, ast):  # noqa
        return ast

    def lib_block(self, ast):  # noqa
        return ast

    def title_cmd(self, ast):  # noqa
        return ast

    def parameters(self, ast):  # noqa
        return ast

    def parameter(self, ast):  # noqa
        return ast

    def gen_expr(self, ast):  # noqa
        return ast

    def tablefile(self, ast):  # noqa
        return ast

    def braced_expression(self, ast):  # noqa
        return ast

    def parenthesis_nodes(self, ast):  # noqa
        return ast

    def circuit_nodes(self, ast):  # noqa
        return ast

    def expression(self, ast):  # noqa
        return ast

    def ternary(self, ast):  # noqa
        return ast

    def conditional_expression(self, ast):  # noqa
        return ast

    def boolean_or(self, ast):  # noqa
        return ast

    def boolean_xor(self, ast):  # noqa
        return ast

    def boolean_and(self, ast):  # noqa
        return ast

    def boolean_not(self, ast):  # noqa
        return ast

    def relational(self, ast):  # noqa
        return ast

    def conditional_factor(self, ast):  # noqa
        return ast

    def term(self, ast):  # noqa
        return ast

    def add_sub(self, ast):  # noqa
        return ast

    def prod(self, ast):  # noqa
        return ast

    def unary(self, ast):  # noqa
        return ast

    def exp(self, ast):  # noqa
        return ast

    def functional(self, ast):  # noqa
        return ast

    def variable(self, ast):  # noqa
        return ast

    def factor(self, ast):  # noqa
        return ast

    def functions(self, ast):  # noqa
        return ast

    def functions_1(self, ast):  # noqa
        return ast

    def atan2(self, ast):  # noqa
        return ast

    def ddx(self, ast):  # noqa
        return ast

    def gauss(self, ast):  # noqa
        return ast

    def i_func(self, ast):  # noqa
        return ast

    def if_func(self, ast):  # noqa
        return ast

    def limit(self, ast):  # noqa
        return ast

    def functions_2(self, ast):  # noqa
        return ast

    def rand(self, ast):  # noqa
        return ast

    def unif(self, ast):  # noqa
        return ast

    def v_func(self, ast):  # noqa
        return ast

    def special_variables(self, ast):  # noqa
        return ast

    def value(self, ast):  # noqa
        return ast

    def imag_value(self, ast):  # noqa
        return ast

    def real_value(self, ast):  # noqa
        return ast

    def freq_value(self, ast):  # noqa
        return ast

    def number_scale(self, ast):  # noqa
        return ast

    def suffix(self, ast):  # noqa
        return ast

    def meg(self, ast):  # noqa
        return ast

    def unit(self, ast):  # noqa
        return ast

    def hz(self, ast):  # noqa
        return ast

    def lead_name(self, ast):  # noqa
        return ast

    def floating_point(self, ast):  # noqa
        return ast

    def integer(self, ast):  # noqa
        return ast

    def digit(self, ast):  # noqa
        return ast

    def filename(self, ast):  # noqa
        return ast

    def boolean(self, ast):  # noqa
        return ast

    def model_name(self, ast):  # noqa
        return ast

    def binary_pattern(self, ast):  # noqa
        return ast

    def binary(self, ast):  # noqa
        return ast

    def dev(self, ast):  # noqa
        return ast

    def node(self, ast):  # noqa
        return ast

    def id(self, ast):  # noqa
        return ast

    def var_id(self, ast):  # noqa
        return ast

    def end_sep(self, ast):  # noqa
        return ast

    def sep(self, ast):  # noqa
        return ast

    def cmd_net_sep(self, ast):  # noqa
        return ast

    def inline_comment(self, ast):  # noqa
        return ast

    def line_comment(self, ast):  # noqa
        return ast

    def text(self, ast):  # noqa
        return ast

    def asterisk(self, ast):  # noqa
        return ast

    def question_mark(self, ast):  # noqa
        return ast

    def colon(self, ast):  # noqa
        return ast

    def semicolon(self, ast):  # noqa
        return ast

    def comma(self, ast):  # noqa
        return ast

    def dot(self, ast):  # noqa
        return ast

    def dollar(self, ast):  # noqa
        return ast

    def double_bar(self, ast):  # noqa
        return ast

    def single_quote(self, ast):  # noqa
        return ast

    def double_quote(self, ast):  # noqa
        return ast

    def lc(self, ast):  # noqa
        return ast

    def rc(self, ast):  # noqa
        return ast

    def lp(self, ast):  # noqa
        return ast

    def rp(self, ast):  # noqa
        return ast

    def newline(self, ast):  # noqa
        return ast

    def st(self, ast):  # noqa
        return ast

    def ws(self, ast):  # noqa
        return ast


def main(filename, **kwargs):
    if not filename or filename == '-':
        text = sys.stdin.read()
    else:
        with open(filename) as f:
            text = f.read()
    parser = SpiceParser()
    return parser.parse(
        text,
        filename=filename,
        **kwargs
    )


if __name__ == '__main__':
    import json
    from tatsu.util import asjson

    ast = generic_main(main, SpiceParser, name='Spice')
    data = asjson(ast)
    print(json.dumps(data, indent=2))
